{
  "version": 3,
  "sources": ["../build/engine.js", "../build/canvas.js", "../build/lib/math.js", "../build/lib/vec.js", "../build/lib/line.js", "../build/app/DrawTool.js", "../build/lib/arc.js", "../build/lib/fit.js", "../build/app/GeometryTool.js", "../build/app/Selection.js", "../build/config.js", "../build/app/Point.js", "../build/app/LineStroke.js", "../build/app/ArcStroke.js", "../build/app/Page.js", "../build/app/App.js", "../build/main.js"],
  "sourcesContent": ["let eventQueue = {\n    pencil: [], // only one pencil - so a list of events\n    touches: {}, // map by touch id to a list of events\n};\n\nwindow.nativeEvent = (eventState, touches) => {\n    Object.entries(touches).forEach(([touchId, points]) => {\n        points.forEach((point) => {\n            if (point.type === \"pencil\") {\n                eventQueue.pencil.push({\n                    // there's more data in `point` that we're ignoring here\n                    type: eventState,\n                    x: point.x,\n                    y: point.y,\n                });\n            } else {\n                if (!eventQueue.touches[touchId]) {\n                    eventQueue.touches[touchId] = [];\n                }\n\n                eventQueue.touches[touchId].push({\n                    type: eventState,\n                    x: point.x,\n                    y: point.y,\n                    timestamp: point.timestamp\n                });\n            }\n        });\n    });\n};\n\n\nlet callback = null\nfunction frame(){\n    callback(eventQueue)\n\n    eventQueue.pencil = []\n    eventQueue.touches = {}\n\n    window.requestAnimationFrame(frame);\n}\n\nexport default (cb) => {\n    callback = cb\n    window.requestAnimationFrame(frame);\n}", "class Canvas {\n    constructor(dom, cb){\n        // SETUP CANVAS\n        this.canvas = document.createElement(\"canvas\")\n        dom.appendChild(this.canvas)\n        const dpr = window.devicePixelRatio\n        let bounds = dom.getBoundingClientRect()\n        this.canvas.width = bounds.width * dpr\n        this.canvas.height = bounds.height * dpr\n        this.ctx = this.canvas.getContext(\"2d\")\n        this.ctx.scale(dpr, dpr)\n\n        // this.canvas.addEventListener(\"touchstart\", e=>e.preventDefault(), false)\n\n        this.callback = cb\n        cb(this.ctx)\n    }\n\n    render(){\n        this.callback(this.ctx)\n    }\n\n}\n\nexport default Canvas", "// Math\n// The JS Math APIs aren't great. Here's a few extras that are nice to have.\n\nexport const TAU = Math.PI * 2;\n\nexport const isZero = (v) => {\n  return Number.EPSILON > Math.abs(v);\n};\n\nexport const isNonZero = (v) => {\n  return !Math.zero(v);\n};\n\nexport const avg = (a, b) => {\n  return (a + b) / 2;\n};\n\nexport const clip = (v, min = 0, max = 1) => {\n  return Math.min(Math.max(min, v), max);\n};\n\nexport const lerpN = (input, outputMin = 0, outputMax = 1, doClip = false) => {\n  input *= outputMax - outputMin;\n  input += outputMin;\n  if (doClip) input = clip(input, outputMin, outputMax);\n  return input;\n};\n\n// Prettier really screwed this one up, alas.\n// The args should be: input, inputMin, inputMax, outputMin, outputMax, doClip\nexport const lerp = (i, im = 0, iM = 1, om = 0, oM = 1, doClip = true) => {\n  if (im == iM) return om; // Avoids a divide by zero\n  if (im > iM) [im, iM, om, oM] = [iM, im, oM, om];\n  if (doClip) i = clip(i, im, iM);\n  i -= im;\n  i /= iM - im;\n  return lerpN(i, om, oM, false);\n};\n\nexport const rand = (min = -1, max = 1) => {\n  return lerpN(Math.random(), min, max);\n};\n\nexport const randInt = (min, max) => {\n  return Math.round(rand(min, max));\n};\n\nexport const roundTo = (input, precision) => {\n  // Using the reciprocal avoids floating point errors. Eg: 3/10 is fine, but 3*0.1 is wrong.\n  p = 1 / precision;\n  return Math.round(input * p) / p;\n};\n\nexport const easeInOut = (t) => {\n  let ease = (t) => Math.pow(t, 3);\n  if (t < 0.5) return lerp(ease(t * 2), 0, 1, 0, 0.5);\n  else return lerp(ease((1 - t) * 2), 1, 0, 0.5, 1);\n};", "// Vec\n// This is a port of (part of) Ivan's homemade CoffeeScript vector library.\n\nimport { isZero, roundTo, clip } from \"./math.js\";\n\n// Constructors ///////////////////////////////////////////////////////////////\n\nconst Vec = (x = 0, y = 0) => {\n  return { x, y };\n};\nexport default Vec;\n\nVec.clone = (v) => {\n  return Vec(v.x, v.y);\n};\n\nVec.fromRectXY = (r) => {\n  return Vec(r.x, r.y);\n};\n\nVec.fromRectWH = (r) => {\n  return Vec(r.w, r.h);\n};\n\nVec.fromRectRB = (r) => {\n  return Vec(r.x + r.w, r.y + r.h);\n};\n\nVec.of = (s) => {\n  return Vec(s, s);\n};\n\nVec.random = (scale = 1) => {\n  return Vec.Smul(\n    scale,\n    Vec.complement(Vec.Smul(2, Vec(Math.random(), Math.random())))\n  );\n};\n\nVec.toA = (v) => {\n  return [v.x, v.y];\n};\n\nVec.polar = (angle, length) => {\n  return Vec(\n    length * Math.cos(angle),\n    length * Math.sin(angle)\n  );\n}\n\n// Static Vectors /////////////////////////////////////////////////////////////\n\nVec.x = Object.freeze(Vec(1));\nVec.y = Object.freeze(Vec(0, 1));\nVec.zero = Object.freeze(Vec());\n\n// FP /////////////////////////////////////////////////////////////////////////\n\nVec.map = (f, v) => {\n  return Vec(f(v.x), f(v.y));\n};\n\nVec.map2 = (f, a, b) => {\n  return Vec(f(a.x, b.x), f(a.y, b.y));\n};\n\nVec.reduce = (f, v) => {\n  return f(v.x, v.y);\n};\n\n// Vector Algebra /////////////////////////////////////////////////////////////\n\n// Not really cross product, but close enough\nVec.cross = (a, b) => {\n  return a.x * b.y - a.y * b.x\n};\n\nVec.project = (a, b) => {\n  return Vec.mulS(b, Vec.dot(a, b) / Vec.len2(b));\n};\n\nVec.reject = (a, b) => {\n  return Vec.sub(a, Vec.project(a, b));\n};\n\nVec.scalarProjection = (p, a, b) => {\n  let ap = Vec.sub(p, a)\n  let ab = Vec.normalize(Vec.sub(b, a))\n  let f = Vec.mulS(ab,  Vec.dot(ap, ab))\n  return Vec.add(a, f)\n}\n\n// Piecewise Vector Arithmetic ////////////////////////////////////////////////\n\nVec.add = (a, b) => {\n  return Vec(a.x + b.x, a.y + b.y);\n};\n\nVec.div = (a, b) => {\n  return Vec(a.x / b.x, a.y / b.y);\n};\n\nVec.mul = (a, b) => {\n  return Vec(a.x * b.x, a.y * b.y);\n};\n\nVec.sub = (a, b) => {\n  return Vec(a.x - b.x, a.y - b.y);\n};\n\n// Vector-Scalar Arithmetic ///////////////////////////////////////////////////\n\nVec.addS = (v, s) => {\n  return Vec.add(v, Vec.of(s));\n};\n\nVec.divS = (v, s) => {\n  return Vec.div(v, Vec.of(s));\n};\n\nVec.mulS = (v, s) => {\n  return Vec.mul(v, Vec.of(s));\n};\n\nVec.subS = (v, s) => {\n  return Vec.sub(v, Vec.of(s));\n};\n\n// Scalar-Vector Arithmetic ///////////////////////////////////////////////////\n\nVec.Sadd = (s, v) => {\n  return Vec.add(Vec.of(s), v);\n};\n\nVec.Sdiv = (s, v) => {\n  return Vec.div(Vec.of(s), v);\n};\n\nVec.Smul = (s, v) => {\n  return Vec.mul(Vec.of(s), v);\n};\n\nVec.Ssub = (s, v) => {\n  return Vec.sub(Vec.of(s), v);\n};\n\n// Measurement ////////////////////////////////////////////////////////////////\n\nVec.dist = (a, b) => {\n  return Vec.len(Vec.sub(a, b));\n};\n\n// Strongly recommend using Vec.dist instead of Vec.dist2 (distance-squared)\nVec.dist2 = (a, b) => {\n  return Vec.len2(Vec.sub(a, b));\n};\n\nVec.dot = (a, b) => {\n  return a.x * b.x + a.y * b.y;\n};\n\nVec.equal = (a, b) => {\n  return isZero(Vec.dist2(a, b));\n};\n\n// Strongly recommend using Vec.len instead of Vec.len2 (length-squared)\nVec.len2 = (v) => {\n  return Vec.dot(v, v);\n};\n\nVec.len = (v) => {\n  return Math.sqrt(Vec.dot(v, v));\n};\n\n// Rounding ///////////////////////////////////////////////////////////////////\n\nVec.ceil = (v) => {\n  return Vec.map(Math.ceil, v);\n};\n\nVec.floor = (v) => {\n  return Vec.map(Math.floor, v);\n};\n\nVec.round = (v) => {\n  return Vec.map(Math.round, v);\n};\n\nVec.roundTo = (v, s) => {\n  return Vec.map2(roundTo, v, Vec.of(s));\n};\n\n// Variations ///////////////////////////////////////////////////////////////////\n\nVec.complement = (v) => {\n  return Vec.Ssub(1, v);\n};\n\nVec.half = (v) => {\n  return Vec.divS(v, 2);\n};\n\nVec.normalize = (v) => {\n  return Vec.divS(v, Vec.len(v));\n};\n\nVec.recip = (v) => {\n  return Vec.Sdiv(1, v);\n};\n\n// Prettier really screwed this one up, alas.\n// The args should be: input, inputMin, inputMax, outputMin, outputMax\nVec.renormalize = (v, im, iM, om, oM) => {\n  return Vec.add(\n    Vec.mul(Vec.div(Vec.sub(v, im), Vec.sub(iM, im)), Vec.sub(oM, om)),\n    om\n  );\n};\n\n// Combinations ///////////////////////////////////////////////////////////////////\n\nVec.avg = (a, b) => {\n  return Vec.half(Vec.add(a, b));\n};\n\nVec.lerp = (a, b, t) => {\n  return Vec.add(a, Vec.Smul(t, Vec.sub(b, a)));\n};\n\nVec.max = (a, b) => {\n  return Vec.map2(Math.max, a, b);\n};\n\nVec.min = (a, b) => {\n  return Vec.map2(Math.min, a, b);\n};\n\n// Reflections ///////////////////////////////////////////////////////////////////\n\nVec.abs = (v) => {\n  return Vec.map(Math.abs, v);\n};\n\nVec.invert = (v) => {\n  return Vec(-v.x, -v.y);\n};\n\nVec.invertX = (v) => {\n  return Vec(-v.x, v.y);\n};\n\nVec.invertY = (v) => {\n  return Vec(v.x, -v.y);\n};\n\n// Rotation & angles ///////////////////////////////////////////////////////////\n\n\n// 90 degrees clockwise\nVec.rotate90CW = (v)=>{\n  return Vec(v.y, -v.x);\n}\n\n// 90 degrees counter clockwise\nVec.rotate90CCW = (v)=>{\n  return Vec(-v.y, v.x);\n}\n\n// Rotate around\nVec.rotateAround = (vector, point, angle) => {\n  // Convert angle to radians\n  const radians = (angle * Math.PI) / 180;\n\n  // Translate vector to the origin\n  const translatedVector = Vec.sub(vector, point)\n\n  // Perform rotation\n  const rotatedVector = Vec(\n    translatedVector.x * Math.cos(radians) - translatedVector.y * Math.sin(radians),\n    translatedVector.x * Math.sin(radians) + translatedVector.y * Math.cos(radians)\n  );\n\n  // Translate vector back to its original position\n  return Vec.add(rotatedVector, point)\n}\n\n\n\nVec.angle = (v) =>{\n  return Math.atan2(v.y, v.x);\n}\n\nVec.angleBetween = (a, b) => {\n  // Calculate the dot product of the two vectors\n  const dotProduct = Vec.dot(a, b);\n\n  // Calculate the magnitudes of the two vectors\n  const magnitudeA = Vec.len(a);\n  const magnitudeB = Vec.len(b);\n\n  // Calculate the angle between the vectors using the dot product and magnitudes\n  const angleInRadians = Math.acos(dotProduct / (magnitudeA * magnitudeB));\n\n  // Convert the angle from radians to degrees\n  const angleInDegrees = (angleInRadians * 180) / Math.PI;\n\n  return angleInDegrees;\n}\n\nVec.angleBetweenClockwise = (a, b) => {\n  const dP = Vec.dot(a, b);\n  const cP = Vec.cross(a, b);\n\n  let angle = Math.atan2(dP, cP);\n\n  // Convert the angle from radians to degrees\n  let angleInDegrees = angle * (180 / Math.PI);\n  if (angleInDegrees < 0) {\n    angleInDegrees = 360 + angleInDegrees;\n  }\n\n  return angleInDegrees;\n}\n\nVec.update = (a, b) =>{\n  a.x = b.x\n  a.y = b.y\n}", "// Line\n// This is a collection of functions related to line segments written by Marcel with help of ChatGPT\n\nimport Vec from \"./vec.js\"\n\nconst Line = (a, b) =>{\n    return {a, b}\n}\nexport default Line\n\nLine.len = (l)=>{\n    return Vec.dist(l.a, l.b)\n}\n\nLine.direction_vec = (l) => {\n    return Vec.normalize(Vec.sub(l.b, l.a))\n}\n\n// Returns intersection if the line segments overlap, or null if they don't\nLine.intersect = (l1, l2) =>{\n    const { a: p1, b: p2 } = l1;\n    const { a: q1, b: q2 } = l2;\n\n    const dx1 = p2.x - p1.x;\n    const dy1 = p2.y - p1.y;\n    const dx2 = q2.x - q1.x;\n    const dy2 = q2.y - q1.y;\n\n    const determinant = dx1 * dy2 - dy1 * dx2;\n\n    if (determinant === 0) {\n        // The lines are parallel or coincident\n        return null;\n    }\n\n    const dx3 = p1.x - q1.x;\n    const dy3 = p1.y - q1.y;\n\n    const t = (dx3 * dy2 - dy3 * dx2) / determinant;\n    const u = (dx1 * dy3 - dy1 * dx3) / determinant;\n\n    if (t >= 0 && t <= 1 && u >= 0 && u <= 1) {\n        // The segments intersect at a point\n        const intersectionX = p1.x + t * dx1;\n        const intersectionY = p1.y + t * dy1;\n        return { x: intersectionX, y: intersectionY };\n    }\n\n    // The segments do not intersect\n    return null;\n}\n\n// Always returns intersection point even if the line segments don't overlap\nLine.intersectAnywhere = (l1, l2) =>{\n    const { a: p1, b: p2 } = l1;\n    const { a: q1, b: q2 } = l2;\n  \n    const dx1 = p2.x - p1.x;\n    const dy1 = p2.y - p1.y;\n    const dx2 = q2.x - q1.x;\n    const dy2 = q2.y - q1.y;\n  \n    const determinant = dx1 * dy2 - dy1 * dx2;\n  \n    if (determinant === 0) {\n      // The lines are parallel or coincident\n      return null;\n    }\n  \n    const dx3 = p1.x - q1.x;\n    const dy3 = p1.y - q1.y;\n  \n    const t = (dx3 * dy2 - dy3 * dx2) / determinant;\n    const u = (dx1 * dy3 - dy1 * dx3) / determinant;\n  \n    const intersectionX = p1.x + t * dx1;\n    const intersectionY = p1.y + t * dy1;\n  \n    return { x: intersectionX, y: intersectionY };\n}\n\n// Get point along slope\nLine.getYforX = (line, x) => {\n    // Extract the coordinates of points a and b\n    const { a, b } = line;\n    const { x: x1, y: y1 } = a;\n    const { x: x2, y: y2 } = b;\n    \n    // Calculate the slope of the line\n    const slope = (y2 - y1) / (x2 - x1);\n    \n    // Calculate the y-coordinate for the given x-coordinate\n    const y = slope * (x - x1) + y1;\n    \n    return y;\n}\n\n// Get point along slope\nLine.getXforY = (line, y) => {\n    // Extract the coordinates of points a and b\n    const { a, b } = line;\n    const { x: x1, y: y1 } = a;\n    const { x: x2, y: y2 } = b;\n\n    // Calculate the slope of the line\n    const slope = (y2 - y1) / (x2 - x1);\n\n    // Calculate the x-coordinate for the given y-coordinate\n    const x = (y - y1) / slope + x1;\n\n    return x;\n}\n\n\nLine.distToPoint = (line, point) => {\n    const { a, b } = line;\n\n    // Calculate vector AB and AP\n    const AB = Vec.sub(b, a);\n    const AP = Vec.sub(point, a);\n  \n    // Calculate the projection of AP onto AB\n    const projection = Vec.dot(AP, AB) / Vec.dot(AB, AB);\n  \n    // Check if the projection is outside the line segment\n    if (projection <= 0) {\n        // Closest point is A\n        return Vec.len(AP);\n    } else if (projection >= 1) {\n        // Closest point is B\n        return Vec.dist(point, b);\n    } else {\n        // Closest point is between A and B\n        const closestPoint = Vec.add(a, Vec.mulS(AB, projection));\n        return Vec.dist(point, closestPoint);\n    }\n}\n\nLine.spreadPointsAlong = (line, n) => {\n    let seg_length = Line.len(line) / n\n    let offset_seg = Vec.mulS(Line.direction_vec(line), seg_length)\n    let points = []\n    for (let i = 0; i < n; i++) {\n        points.push(Vec.add(line.a, Vec.mulS(offset_seg, i)))\n    }\n    return points\n}", "import Line from \"../lib/line.js\";\nimport Vec from \"../lib/vec.js\";\n\nexport default class DrawTool {\n    constructor(page){\n        this.page = page\n        this.a = null;\n        this.b = null;\n    }\n\n    pen_down(pos){\n        this.a = pos\n        this.b = Vec.clone(pos)\n    }\n\n    pen_move(pos) {\n        this.b = pos\n    }\n\n    pen_up(pos) {\n        let line = Line(this.a, this.b)\n\n        this.page.add_line(line)\n\n        this.a = null\n        this.b = null\n    }\n\n    render(ctx){\n        if(!this.a) return\n\n        ctx.lineWidth = 1.0;\n        ctx.strokeStyle = '#000000';\n        ctx.beginPath();\n        ctx.moveTo(this.a.x, this.a.y);\n        ctx.lineTo(this.b.x, this.b.y);\n        ctx.stroke();\n    }\n}", "// Arc, defined by angles in radians\n\nimport Vec from \"./vec.js\";\n\nconst Arc = (center, radius, startAngle, endAngle, clockwise=true) => {\n    return {center, radius, startAngle, endAngle, clockwise}\n}\nexport default Arc\n\nArc.len = (arc) => {\n    let {radius, startAngle, endAngle} = arc;\n    \n    // Calculate the arc length using the formula: arc length = radius * angle\n    const length = radius * Math.abs(endAngle - startAngle);\n    \n    // Return the arc length\n    return length;\n}\n\nArc.distToPointCircle = (circle, point) => {\n    const distance = Vec.dist(circle.center, point);\n    return Math.abs(distance - circle.radius);\n}\n\nArc.spreadPointsAlong = (arc, n) =>{\n    const points = [];\n\n    let innerAngle = Arc.directedInnerAngle(arc)\n    let angleStep = innerAngle / (n-1);\n\n    for (let i = 0; i < n; i++) {\n        const angle = arc.startAngle + angleStep * i;\n        let offset = Vec(\n            arc.radius * Math.cos(angle),\n            arc.radius * Math.sin(angle)\n        )\n        points.push(Vec.add(arc.center, offset))\n    }\n\n    return points\n}\n\n// Computes the inner angle moving in correct direction (positive if clockwise, negative if counter clockwise)\nArc.directedInnerAngle = (arc)=>{\n    let difference = arc.endAngle - arc.startAngle\n    if(arc.clockwise && difference < 0) {\n        return (2*Math.PI)-Math.abs(difference)\n    } else if(!arc.clockwise && difference > 0) {\n        return (-2*Math.PI)+Math.abs(difference)\n    }\n\n    return difference\n}\n\nArc.points = (arc)=>{\n    console.log(arc);\n    let start = Vec.add(arc.center, Vec.polar(arc.startAngle, arc.radius))\n    let end = Vec.add(arc.center, Vec.polar(arc.endAngle, arc.radius))\n\n    return { start, end }\n}", "import Arc from \"./arc.js\"\nimport Line from \"./line.js\"\nimport Vec from \"./vec.js\"\n\n\nconst Fit = {}\nexport default Fit\n\nFit.line = (stroke) => {\n    if(stroke.length < 3) return null\n    let total_dist = 0\n    let line = Line(Vec.clone(stroke[0]), Vec.clone(stroke[stroke.length-1]))\n    \n    for (let i = 1; i < stroke.length-1; i++) {\n        total_dist += Line.distToPoint(line, stroke[i])\n    }\n\n    let line_len = Line.len(line)\n    \n    return {\n        type: \"line\",\n        line,\n        fitness: total_dist / line_len,\n        length: line_len\n    }\n}\n\nFit.arc = (points) => {\n    if(points.length < 3) return null\n    let simplified = Fit.innerTriangle(points);\n    let [a, b, c] = simplified\n\n    if(!b) return null\n\n    let x1 = a.x;\n    let y1 = a.y;\n    let x2 = b.x;\n    let y2 = b.y;\n    let x3 = c.x;\n    let y3 = c.y;\n\n    const D = 2 * (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2));\n    const centerX = ((x1 * x1 + y1 * y1) * (y2 - y3) + (x2 * x2 + y2 * y2) * (y3 - y1) + (x3 * x3 + y3 * y3) * (y1 - y2)) / D;\n    const centerY = ((x1 * x1 + y1 * y1) * (x3 - x2) + (x2 * x2 + y2 * y2) * (x1 - x3) + (x3 * x3 + y3 * y3) * (x2 - x1)) / D;\n    const radius = Math.sqrt((x1 - centerX) * (x1 - centerX) + (y1 - centerY) * (y1 - centerY));\n    \n    let startAngle = Math.atan2(y1 - centerY, x1 - centerX);\n    let endAngle = Math.atan2(y3 - centerY, x3 - centerX);\n\n    // Compute winding order\n    let ab = Vec.sub(simplified[0], simplified[1])\n    let bc = Vec.sub(simplified[1], simplified[2])\n    let clockwise = Vec.cross(ab, bc) > 0\n\n    let arc = Arc(Vec(centerX, centerY), radius, startAngle, endAngle, clockwise)\n\n    // Compute fitness\n    let arc_dist = Arc.len(arc)\n    \n    let total_dist = 0\n    points.forEach(point=>{\n        total_dist += Arc.distToPointCircle(arc, point)\n    })\n\n\n    return {\n        type: \"arc\",\n        arc,\n        fitness: total_dist / arc_dist,\n        length: arc_dist\n    }\n}\n\nFit.innerTriangle = (points) => {\n    let start = points[0]\n    let end = points[points.length-1]\n\n    var largestDistance = -1;\n    var furthestIndex = -1;\n    \n    for (let i = 0; i < points.length; i++) {\n      let point = points[i]\n      let dist = Line.distToPoint(Line(start, end), point)\n      if(dist > largestDistance) {\n        largestDistance = dist\n        furthestIndex = i\n      }\n    }\n\n    return [start, points[furthestIndex], end]\n}\n\nFit.circle = (points) => {\n    if(points.length < 3) return null\n    // Do a basic circular regression\n    const n = points.length;\n    let sumX = 0;\n    let sumY = 0;\n    let sumX2 = 0;\n    let sumY2 = 0;\n    let sumXY = 0;\n    let sumX3 = 0;\n    let sumY3 = 0;\n    let sumXY2 = 0;\n    let sumX2Y = 0;\n\n    for (const point of points) {\n        const { x, y } = point;\n        sumX += x;\n        sumY += y;\n        sumX2 += x * x;\n        sumY2 += y * y;\n        sumXY += x * y;\n        sumX3 += x * x * x;\n        sumY3 += y * y * y;\n        sumXY2 += x * y * y;\n        sumX2Y += x * x * y;\n    }\n\n    const C = n * sumX2 - sumX * sumX;\n    const D = n * sumXY - sumX * sumY;\n    const E = n * sumX3 + n * sumXY2 - (sumX2 + sumY2) * sumX;\n    const G = n * sumY2 - sumY * sumY;\n    const H = n * sumX2Y + n * sumY3 - (sumX2 + sumY2) * sumY;\n\n    const a = (H * D - E * G) / (C * G - D * D);\n    const b = (H * C - E * D) / (D * D - G * C);\n    const c = -(a * sumX + b * sumY + sumX2 + sumY2) / n;\n\n    // Construct circle\n    const center = Vec(-a / 2, -b/2);\n    const radius = Math.sqrt(center.x * center.x + center.y * center.y - c);\n\n    // Compute angles\n    const startAngle = Math.atan2(points[0].y - center.y, points[0].x - center.x)\n    const endAngle = Math.atan2(points[points.length-1].y - center.y, points[points.length-1].x - center.x)\n\n    // Determine winding order\n    // Compute winding order\n    let ab = Vec.sub(points[0], points[1])\n    let bc = Vec.sub(points[1], points[2])\n    let clockwise = Vec.cross(ab, bc) > 0\n\n    let circle  = {center, radius, startAngle, endAngle, clockwise}\n\n    // check fitness\n    let total_dist = 0\n    points.forEach(point=>{\n        total_dist += Arc.distToPointCircle(circle, point)\n    })\n\n    let circumference = 2*Math.PI*radius\n\n    return { \n        type: \"circle\",\n        circle,\n        fitness: total_dist / circumference\n    };\n}", "import Arc from \"../lib/arc.js\";\nimport Fit from \"../lib/fit.js\";\nimport Line from \"../lib/line.js\";\nimport Vec from \"../lib/vec.js\";\n\nlet qua = Math.PI * 0.5 // 90 degrees\nlet phi = Math.PI * 2 // 360 degrees\n\nexport default class GeometryTool {\n    constructor(page){\n        this.page = page\n        this.input_points = []\n        this.ideal_points = []\n        this.render_points = []\n        \n        // Velocity stuff\n        this.velocity = 0\n        this.max_velocity = 0\n        this.prev_pos = null\n\n        // Curve fitting\n        this.state = \"unknown\" // unknown, guess, fixed\n        this.fit = null\n\n        // Snaps\n        this.snaps = {}\n\n    }\n\n    pen_down(pos){\n        this.input_points = [pos]\n        this.render_points = [Vec.clone(pos)]\n\n        this.velocity = 0\n        this.max_velocity = 0\n        this.prev_pos = pos\n\n        this.state = \"unknown\"\n\n        this.snaps = {}\n    }\n\n    pen_move(pos) {\n        // Compute filtered velocity\n        const new_velocity = Vec.dist(this.prev_pos, pos)\n        const alpha = 0.05 // Filtering constant\n        this.velocity = alpha * new_velocity + (1 - alpha) * this.velocity\n        this.max_velocity = Math.max(this.max_velocity, this.velocity)\n        this.prev_pos = pos\n\n        if(this.state != \"fixed\") {\n            if(Vec.dist(this.input_points[this.input_points.length-1], pos) > 1) {\n                // Add point to input buffer\n                this.input_points.push(pos)\n                this.render_points.push(Vec.clone(pos))\n            }\n        }\n\n        if(this.state == \"unknown\" && this.input_points.length > 100) {\n            this.state = \"guess\"\n        }\n\n        if(this.state == \"guess\") {\n            this.do_fit()\n        }\n\n        if(this.state != \"fixed\" && this.input_points.length > 10 && this.velocity < 1 && this.velocity < this.max_velocity) {\n            this.do_fit()\n            this.state = \"fixed\"\n        }\n\n        if(this.state == \"fixed\") {\n            if(this.fit) {\n                if(this.fit.type == \"line\") {\n                    this.fit.line.b = pos\n                    this.do_snap()\n                    this.update_ideal()\n                }\n\n                if(this.fit.type == \"arc\") {\n                    // update angle\n                    let diff = Vec.sub(pos, this.fit.arc.center)\n                    let angle = Math.atan2(diff.y, diff.x)\n                    this.fit.arc.endAngle = angle\n\n                    // update center\n                    let start_pos = Vec.add(this.fit.arc.center, Vec.polar(this.fit.arc.startAngle, this.fit.arc.radius))\n                    let new_radius = Vec.dist(this.fit.arc.center, pos)\n                    \n                    let new_center = Vec.add(start_pos, Vec.mulS(Vec.normalize(Vec.sub(this.fit.arc.center, start_pos)), new_radius))\n\n                    this.fit.arc.radius = new_radius\n                    this.fit.arc.center = new_center\n                    // this.fit.arc.center = Vec.mulS(Vec.add(start_pos, pos), 0.5)\n                    // \n\n                    this.do_snap()\n                    this.update_ideal()\n                }\n            }\n        }\n    }\n\n    pen_up(pos) {\n        this.state = \"fixed\"\n        this.snaps = {}\n        \n        if(this.fit) {\n            if(this.fit.type == \"line\") {\n                this.page.add_line(this.fit.line)\n            }\n        }\n    }\n\n    do_fit(){\n        let line_fit = Fit.line(this.input_points)\n        let arc_fit = Fit.arc(this.input_points)\n        let circle_fit = Fit.circle(this.input_points)\n\n        this.arc_fit = arc_fit\n        this.line_fit = line_fit\n        this.circle_fit = circle_fit\n\n        this.fit = line_fit\n        if(arc_fit && Math.abs(Arc.directedInnerAngle(arc_fit.arc)) > 0.4*Math.PI && arc_fit.fitness < line_fit.fitness) {\n            this.fit = arc_fit\n\n            if(Math.abs(Arc.directedInnerAngle(arc_fit.arc)) > 1.5*Math.PI) {\n                if(circle_fit && circle_fit.circle.radius < 500 && circle_fit.fitness < arc_fit.fitness) {\n                    this.fit = circle_fit\n                }\n            }\n        }\n        \n        if(this.fit) {\n            this.do_snap()\n            this.update_ideal()\n        }\n    }\n\n    do_snap(){\n        this.snaps = {}\n        if(this.fit.type == \"line\") {\n            let line = this.fit.line\n\n            // Line snaps\n            if(Math.abs(line.a.x - line.b.x) < 20) {\n                line.b.x = line.a.x\n                this.snaps[\"v_snap\"] = Line(\n                    Vec.add(line.b, Vec.mulS(Vec.sub(line.a, line.b), 100)),\n                    Vec.add(line.a, Vec.mulS(Vec.sub(line.b, line.a), 100))\n                )\n            }\n\n            if(Math.abs(line.a.y - line.b.y) < 20) {\n                line.b.y = line.a.y\n                this.snaps[\"h_snap\"] = Line(\n                    Vec.add(line.b, Vec.mulS(Vec.sub(line.a, line.b), 100)),\n                    Vec.add(line.a, Vec.mulS(Vec.sub(line.b, line.a), 100))\n                )\n            }\n\n            // Alignment snaps\n            // if (this.velocity < 1.5) {\n            //     this.pagepoints.forEach(point => {\n            //         const sx = Line.getXforY(line, point.pos.y);\n            //         const sx_pt = Vec(sx, point.pos.y)\n            //         if(Vec.dist(pos, sx_pt) < 10) {\n\n            //         }\n\n\n            //         const sy = Line.getYforX(line, point.pos.x);\n\n                    \n            //         // snaps.push(\n            //         //     { type: 'horizontal', x: sx, y: point.pos.y, snap: point },\n            //         //     { type: 'vertical', x: point.pos.x, y: sy, snap: point },\n            //         // );\n            //     });\n    \n            //     this.point_snap = false;\n            //     snaps.forEach(snap => {\n            //         if (Vec.dist(pos, snap) < 10) {\n            //             this.b.x = snap.x;\n            //             this.b.y = snap.y;\n            //             this.point_snap = snap;\n            //         }\n            //     });\n            // } \n\n            // Cooincident snaps\n            const point_snap_a = this.page.find_point_near(line.a, 10)\n            if (point_snap_a) {\n                line.a = point_snap_a.pos;\n            }\n\n            const point_snap_b = this.page.find_point_near(line.b, 10)\n            if (point_snap_b) {\n                line.b = point_snap_b.pos;\n            }\n        }\n\n        if(this.fit.type == \"arc\") {\n            let arc = this.fit.arc\n            \n            // Snap center\n            let start_pos = Vec.add(this.fit.arc.center, Vec.polar(this.fit.arc.startAngle, this.fit.arc.radius))\n            \n            // if(Math.abs(start_pos.x - arc.center.x) < 20) {\n            //     arc.center.x = start_pos.x\n            // }\n\n            if(Math.abs(start_pos.y - arc.center.y) < 20) {\n                arc.center.y = start_pos.y\n                arc.startAngle = Math.PI * (arc.clockwise ? -1 : 0)\n            }\n\n\n            \n            const closest_round_start_angle = (Math.round(arc.startAngle / qua) * qua + phi) % phi;\n            if(Math.abs(arc.startAngle - closest_round_start_angle) < 0.1) {\n                arc.startAngle = closest_round_start_angle\n            }\n\n            const closest_round_end_angle = (Math.round(arc.endAngle / qua) * qua + phi) % phi;\n            if(Math.abs(arc.endAngle - closest_round_end_angle) < 0.1) {\n                arc.endAngle = closest_round_end_angle\n            }\n        }\n\n        if(this.fit.type == \"circle\") {\n            let arc = this.fit.circle\n\n            if(Math.abs(arc.startAngle - arc.endAngle) - phi < 10) {\n                arc.endAngle = arc.endAngle + phi\n            }\n        }\n        \n    }\n\n    update_ideal(){\n        if(this.fit.type == \"line\") {\n            this.ideal_points = Line.spreadPointsAlong(this.fit.line, this.input_points.length)\n        } else if(this.fit.type == \"arc\") {\n            this.ideal_points = Arc.spreadPointsAlong(this.fit.arc, this.input_points.length)\n        } else if(this.fit.type == \"circle\") {\n            this.ideal_points = Arc.spreadPointsAlong(this.fit.circle, this.input_points.length)\n        }\n    }\n\n    render(ctx){\n        ctx.strokeStyle = \"#000000\";\n\n        //Interpolate animation render points\n        if(this.render_points.length == this.ideal_points.length) {\n            for (let i = 0; i < this.ideal_points.length; i++) {\n                this.render_points[i] = Vec.lerp(this.ideal_points[i], this.render_points[i], 0.8)\n            }\n        }\n        \n\n        // RENDER\n        // Render debug info\n        ctx.fillText(this.state, 100, 100)\n        if(this.fit) {\n            // ctx.fillText(this.fit.type, 100, 120)\n            // ctx.fillText(this.arc_fit.fitness, 100, 140)\n            // ctx.fillText(this.circle_fit.fitness, 100, 160)\n            //ctx.fillText(JSON.stringify(this.arc_fit.arc), 100, 160)\n            //ctx.fillText(Arc.innerAngle(this.arc_fit.arc), 100, 180)\n            // ctx.fillText(this.line_fit.fitness + \" - \" + this.line_fit.length, 100, 140)\n            // ctx.fillText(this.arc_fit.fitness + \" - \" + this.arc_fit.radius, 100, 160)\n            if(this.fit.type == \"arc\") {\n                let start_pos = Vec.add(this.fit.arc.center, Vec.polar(this.fit.arc.startAngle, this.fit.arc.radius))\n                ctx.fillRect(start_pos.x, start_pos.y, 4, 4)\n            }\n        }\n\n        // render snaps\n        ctx.strokeStyle = \"#D2BBF9\";\n        Object.keys(this.snaps).forEach(snap_key=>{\n            const snap = this.snaps[snap_key]\n            ctx.beginPath()\n            ctx.moveTo(snap.a.x, snap.a.y)\n            ctx.lineTo(snap.b.x, snap.b.y)\n            ctx.stroke()\n        })\n\n        \n        ctx.strokeStyle = \"#000000\";\n\n        // render stroke\n        let points = this.render_points\n        if(points.length > 1) {\n            ctx.beginPath()\n            ctx.moveTo(points[0].x, points[0].y)\n            for (let i = 1; i < points.length; i++) {\n                ctx.lineTo(points[i].x, points[i].y)    \n            }\n            ctx.stroke()\n        }\n\n        if(this.state != \"fixed\") {\n            ctx.strokeStyle = \"#00000022\";\n            points = this.input_points\n            if(points.length > 1) {\n                ctx.beginPath()\n                ctx.moveTo(points[0].x, points[0].y)\n                for (let i = 1; i < points.length; i++) {\n                    ctx.lineTo(points[i].x, points[i].y)    \n                }\n                ctx.stroke()\n            }\n        }\n\n        if(this.arc_fit) {\n            ctx.beginPath();\n            ctx.ellipse(this.arc_fit.arc.center.x, this.arc_fit.arc.center.y, 2, 2, 0, 0, Math.PI * 2);\n            ctx.fill();\n        }\n\n        \n        // render fit\n        // if(this.arc_fit) {\n        //     ctx.strokeStyle = \"#AAAAAA\";\n        //     let circle = this.arc_fit.arc\n        //     ctx.beginPath()\n        //     //ctx.ellipse(circle.center.x, circle.center.y, circle.radius, circle.radius, 0, 0, Math.PI*2);\n        //     ctx.ellipse(circle.center.x, circle.center.y, circle.radius, circle.radius, 0, circle.startAngle, circle.endAngle, !circle.clockwise);\n        //     ctx.stroke()\n        // }\n\n    }\n}", "export default class Selection {\n    constructor(page){\n        this.page = page\n\n        this.selection = {\n            points: {},\n            strokes: {}\n        }\n    }\n\n    // TOUCH EVENTS\n    touch_down(pos, id, timestamp){\n        const found = this.page.find_point_near(pos);\n        if(found) {\n            this.selection.points[found.id] = found;\n        }\n    }\n\n    touch_move(pos, id, timestamp){\n        \n    }\n\n    touch_up(pos, id, timestamp) {\n        \n    }\n\n    render(ctx) {\n        Object.keys(this.selection.points).forEach(key=>{\n            let point = this.selection.points[key]\n            ctx.fillStyle = \"#D2BBF9\";\n            ctx.beginPath();\n            ctx.ellipse(point.pos.x, point.pos.y, 8, 8, 0, 0, Math.PI * 2);\n            ctx.fill();\n        })\n    }\n}", "export default {\n    filming_mode: false\n}", "import Vec from \"../lib/vec.js\";\nimport config from \"../config.js\";\n\n// Monotonically incrementing id counter\nlet nextId = 0;\nlet size = config.filming_mode ? 4: 3\n\nexport default class Point {\n    constructor(pos) {\n        this.id = nextId++;\n        this.pos = pos || Vec();\n    }\n\n    render(ctx, color = '#000000') {\n        ctx.fillStyle = color;\n        ctx.beginPath();\n        ctx.ellipse(this.pos.x, this.pos.y, size, size, 0, 0, Math.PI * 2);\n        ctx.fill();\n    }\n}", "import config from \"../config.js\";\nlet size = config.filming_mode ? 3: 1\n\n// Monotonically incrementing id counter\nlet nextId = 0;\n\n\nexport default class LineStroke {\n    constructor(a, b) {\n        this.id = nextId++;\n        this.a = a;\n        this.b = b;\n    }\n\n    render(ctx, color = '#000000') {\n        ctx.lineWidth = size;\n        ctx.strokeStyle = color;\n        ctx.beginPath();\n        ctx.moveTo(this.a.pos.x, this.a.pos.y);\n        ctx.lineTo(this.b.pos.x, this.b.pos.y);\n        ctx.stroke();\n    }\n}", "import Vec from \"../lib/vec.js\";\n\n// Monotonically incrementing id counter\nlet nextId = 0;\n\nexport default class ArcStroke {\n    constructor(a, b, c) {\n        this.id = nextId++;\n        this.a = a\n        this.b = b\n        this.c = c\n    }\n\n    render(ctx) {\n        ctx.lineWidth = 1\n        ctx.strokeStyle = \"#000000\"\n\n        let startAngle = Vec.angle(Vec.sub(this.a.pos, this.c.pos))\n        let endAngle = Vec.angle(Vec.sub(this.b.pos, this.c.pos))\n        let radius = Vec.dist(this.a.pos, this.c.pos)\n        \n        ctx.beginPath();\n        ctx.ellipse(this.c.pos.x, this.c.pos.y, radius, radius, 0, startAngle, endAngle);\n        ctx.stroke();\n    }\n}", "import Point from \"./Point.js\";\nimport LineStroke from \"./LineStroke.js\";\nimport Vec from \"../lib/vec.js\";\nimport Line from \"../lib/line.js\";\nimport Arc from \"../lib/arc.js\";\nimport ArcStroke from \"./ArcStroke.js\";\n\nexport default class Page {\n    constructor(){\n        this.points = []\n        this.strokes = []\n    }\n\n    // FIND ELEMENTS\n    find_point_near(pos, dist = 20) {\n        return this.points.find(point => Vec.dist(point.pos, pos) < dist);\n    }\n\n    find_stroke_near(pos) {\n        return this.strokes.find(stroke=> {\n            const dist = Line.distToPoint(Line(stroke.a.pos, stroke.b.pos), pos);\n            return dist < 20;\n        })\n    }\n\n    // ADD NEW\n    add_line(line) {\n        let a = new Point(line.a)\n        let b = new Point(line.b)\n\n        this.points.push(a)\n        this.points.push(b)\n        this.strokes.push(new LineStroke(a, b))\n    }\n\n    add_arc(arc) {\n        let {start, end} = Arc.points(arc)\n\n        console.log(start, end);\n        let a = new Point(start)\n        let b = new Point(end)\n        let c = new Point(arc.center)\n        this.points.push(a)\n        this.points.push(b)\n        this.points.push(c)\n\n        this.strokes.push(new ArcStroke(a, b, c))\n    }\n\n    render(ctx){\n\n        if(!this.repeater) {\n            ctx.beginPath();\n            ctx.ellipse(30, 30, 20, 20, 0, 0, Math.PI * 2);\n            ctx.stroke();\n        }\n        \n\n        this.strokes.forEach(stroke=>{\n            stroke.render(ctx)\n        })\n\n        this.points.forEach(point=>{\n            point.render(ctx)\n        })\n    }\n}", "import Vec from \"../lib/vec.js\";\nimport DrawTool from \"./DrawTool.js\";\nimport GeometryTool from \"./GeometryTool.js\";\nimport Selection from \"./Selection.js\";\nimport Page from \"./Page.js\";\nimport Arc from \"../lib/arc.js\";\n\n\nexport default class App {\n    constructor(){\n        this.page = new Page();\n\n        //this.page.add_arc(Arc({x: 200, y: 200}, 100, Math.PI, 0))\n\n        this.draw_tool = new DrawTool(this.page);\n        this.geometry_tool = new GeometryTool(this.page);\n\n        this.selection = new Selection(this.page);\n    }\n\n    update(events){\n        // Handle pencil input\n        events.pencil.forEach(event => {\n            const pos = Vec(event.x, event.y);\n            if (event.type === 'began') {\n                this.geometry_tool.pen_down(pos);\n            } else if (event.type === 'moved') {\n                this.geometry_tool.pen_move(pos);\n            } else if (event.type === 'ended') {\n                this.geometry_tool.pen_up(pos);\n            }\n        })\n\n        // Handle touch input\n        Object.entries(events.touches).forEach(([touchId, events]) => {\n            events.forEach(event => {\n                const pos = Vec(event.x, event.y);\n                if (event.type === 'began') {\n                    this.selection.touch_down(pos, touchId, event.timestamp);\n                } else if (event.type === 'moved') {\n                    this.selection.touch_move(pos, touchId, event.timestamp);\n                } else if (event.type === 'ended') {\n                    this.selection.touch_up(pos, touchId, event.timestamp);\n                }\n            })\n        })\n    }\n\n    render(ctx){\n        this.selection.render(ctx)\n        this.geometry_tool.render(ctx)\n        this.page.render(ctx)\n    }\n}", "import engine from './engine.js';\nimport Canvas from './canvas.js';\nimport App from './app/App.js';\n\n\nconst app = new App();\n\nconsole.log(\"hello world\");\n\nconst canvas = new Canvas(document.body, ctx => {\n  ctx.clearRect(0,0, window.innerWidth, window.innerHeight);\n  app.render(ctx);\n});\n\nengine((events) => {\n  app.update(events);\n  //relax();\n  canvas.render();\n});"],
  "mappings": "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",
  "names": []
}
