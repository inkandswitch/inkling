{
  "version": 3,
  "sources": ["/Users/admin/Work/Inkling/Prototypes/OldInputSystem/src/lib/vec.ts"],
  "sourcesContent": ["// tslint:disable:variable-name\n\n// Vec\n// This is a port of (part of) Ivan's homemade CoffeeScript vector library.\n\nimport { isZero, roundTo } from './math';\nimport { Position } from './types';\n\nexport interface Vector {\n  x: number;\n  y: number;\n}\n\ninterface Rectangle {\n  x: number;\n  y: number;\n  w: number;\n  h: number;\n}\n\n// Constructors ///////////////////////////////////////////////////////////////\n\nconst Vec = (x = 0, y = 0): Vector => ({ x, y });\nexport default Vec;\n\nVec.clone = (v: Vector) => Vec(v.x, v.y);\n\nVec.fromRectXY = (r: Rectangle) => Vec(r.x, r.y);\n\nVec.fromRectWH = (r: Rectangle) => Vec(r.w, r.h);\n\nVec.fromRectRB = (r: Rectangle) => Vec(r.x + r.w, r.y + r.h);\n\nVec.of = (s: number) => Vec(s, s);\n\nVec.random = (scale = 1) =>\n  Vec.Smul(\n    scale,\n    Vec.complement(Vec.Smul(2, Vec(Math.random(), Math.random())))\n  );\n\nVec.toA = (v: Vector) => [v.x, v.y];\n\nVec.polar = (angle: number, length: number) =>\n  Vec(length * Math.cos(angle), length * Math.sin(angle));\n\n// Static Vectors /////////////////////////////////////////////////////////////\n\nVec.x = Object.freeze(Vec(1));\nVec.y = Object.freeze(Vec(0, 1));\nVec.zero = Object.freeze(Vec());\n\n// FP /////////////////////////////////////////////////////////////////////////\n\nVec.map = (f: (x: number) => number, v: Vector) => Vec(f(v.x), f(v.y));\n\nVec.map2 = (f: (x: number, y: number) => number, a: Vector, b: Vector) =>\n  Vec(f(a.x, b.x), f(a.y, b.y));\n\nVec.reduce = (f: (x: number, y: number) => number, v: Vector) => f(v.x, v.y);\n\n// Vector Algebra /////////////////////////////////////////////////////////////\n\n// Not really cross product, but close enough\nVec.cross = (a: Vector, b: Vector) => a.x * b.y - a.y * b.x;\n\nVec.project = (a: Vector, b: Vector) =>\n  Vec.mulS(b, Vec.dot(a, b) / Vec.len2(b));\n\nVec.reject = (a: Vector, b: Vector) => Vec.sub(a, Vec.project(a, b));\n\nVec.scalarProjection = (p: Position, a: Vector, b: Vector): Position => {\n  const ap = Vec.sub(p, a);\n  const ab = Vec.normalize(Vec.sub(b, a));\n  const f = Vec.mulS(ab, Vec.dot(ap, ab));\n  return Vec.add(a, f);\n};\n\n// Piecewise Vector Arithmetic ////////////////////////////////////////////////\n\nVec.add = (a: Vector, b: Vector) => Vec(a.x + b.x, a.y + b.y);\nVec.div = (a: Vector, b: Vector) => Vec(a.x / b.x, a.y / b.y);\nVec.mul = (a: Vector, b: Vector) => Vec(a.x * b.x, a.y * b.y);\nVec.sub = (a: Vector, b: Vector) => Vec(a.x - b.x, a.y - b.y);\n\n// Vector-Scalar Arithmetic ///////////////////////////////////////////////////\n\nVec.addS = (v: Vector, s: number) => Vec.add(v, Vec.of(s));\nVec.divS = (v: Vector, s: number) => Vec.div(v, Vec.of(s));\nVec.mulS = (v: Vector, s: number) => Vec.mul(v, Vec.of(s));\nVec.subS = (v: Vector, s: number) => Vec.sub(v, Vec.of(s));\n\n// Scalar-Vector Arithmetic ///////////////////////////////////////////////////\n\nVec.Sadd = (s: number, v: Vector) => Vec.add(Vec.of(s), v);\nVec.Sdiv = (s: number, v: Vector) => Vec.div(Vec.of(s), v);\nVec.Smul = (s: number, v: Vector) => Vec.mul(Vec.of(s), v);\nVec.Ssub = (s: number, v: Vector) => Vec.sub(Vec.of(s), v);\n\n// Measurement ////////////////////////////////////////////////////////////////\n\nVec.dist = (a: Vector, b: Vector) => Vec.len(Vec.sub(a, b));\n\n// Strongly recommend using Vec.dist instead of Vec.dist2 (distance-squared)\nVec.dist2 = (a: Vector, b: Vector) => Vec.len2(Vec.sub(a, b));\n\nVec.dot = (a: Vector, b: Vector) => a.x * b.x + a.y * b.y;\n\nVec.equal = (a: Vector, b: Vector) => isZero(Vec.dist2(a, b));\n\n// Strongly recommend using Vec.len instead of Vec.len2 (length-squared)\nVec.len2 = (v: Vector) => Vec.dot(v, v);\n\nVec.len = (v: Vector) => Math.sqrt(Vec.dot(v, v));\n\n// Rounding ///////////////////////////////////////////////////////////////////\n\nVec.ceil = (v: Vector) => Vec.map(Math.ceil, v);\nVec.floor = (v: Vector) => Vec.map(Math.floor, v);\nVec.round = (v: Vector) => Vec.map(Math.round, v);\nVec.roundTo = (v: Vector, s: number) => Vec.map2(roundTo, v, Vec.of(s));\n\n// Variations ///////////////////////////////////////////////////////////////////\n\nVec.complement = (v: Vector) => Vec.Ssub(1, v);\nVec.half = (v: Vector) => Vec.divS(v, 2);\nVec.normalize = (v: Vector) => Vec.divS(v, Vec.len(v));\nVec.recip = (v: Vector) => Vec.Sdiv(1, v);\nVec.renormalize = (v: Vector, length: number) =>\n  Vec.Smul(length, Vec.normalize(v));\n\n// Combinations ///////////////////////////////////////////////////////////////////\n\nVec.avg = (a: Vector, b: Vector) => Vec.half(Vec.add(a, b));\nVec.lerp = (a: Vector, b: Vector, t: number) =>\n  Vec.add(a, Vec.Smul(t, Vec.sub(b, a)));\nVec.max = (a: Vector, b: Vector) => Vec.map2(Math.max, a, b);\nVec.min = (a: Vector, b: Vector) => Vec.map2(Math.min, a, b);\n\n// Reflections ///////////////////////////////////////////////////////////////////\n\nVec.abs = (v: Vector) => Vec.map(Math.abs, v);\nVec.invert = (v: Vector) => Vec(-v.x, -v.y);\nVec.invertX = (v: Vector) => Vec(-v.x, v.y);\nVec.invertY = (v: Vector) => Vec(v.x, -v.y);\n\n// Rotation & angles ///////////////////////////////////////////////////////////\n\n// 90 degrees clockwise\nVec.rotate90CW = (v: Vector) => Vec(v.y, -v.x);\n\n// 90 degrees counter clockwise\nVec.rotate90CCW = (v: Vector) => Vec(-v.y, v.x);\n\n// TODO(marcel): right now this module is inconsistent in the way it expects angles to work.\n// e.g., this function takes an angle in radians, whereas angleBetween uses degrees.\n// (this will help avoid confusion...)\nVec.rotate = (v: Vector, angle: number) =>\n  Vec(\n    v.x * Math.cos(angle) - v.y * Math.sin(angle),\n    v.x * Math.sin(angle) + v.y * Math.cos(angle)\n  );\n\n// Rotate around\nVec.rotateAround = (\n  vector: Vector,\n  point: Position,\n  angle: number\n): Position => {\n  // Translate vector to the origin\n  const translatedVector = Vec.sub(vector, point);\n\n  const rotatedVector = Vec.rotate(translatedVector, angle);\n\n  // Translate vector back to its original position\n  return Vec.add(rotatedVector, point);\n};\n\nVec.angle = (v: Vector) => Math.atan2(v.y, v.x);\n\nVec.angleBetween = (a: Vector, b: Vector) => {\n  // Calculate the dot product of the two vectors\n  const dotProduct = Vec.dot(a, b);\n\n  // Calculate the magnitudes of the two vectors\n  const magnitudeA = Vec.len(a);\n  const magnitudeB = Vec.len(b);\n\n  // Calculate the angle between the vectors using the dot product and magnitudes\n  const angleInRadians = Math.acos(dotProduct / (magnitudeA * magnitudeB));\n\n  return angleInRadians;\n};\n\nVec.angleBetweenClockwise = (a: Vector, b: Vector) => {\n  const dP = Vec.dot(a, b);\n  const cP = Vec.cross(a, b);\n\n  const angleInRadians = Math.atan2(cP, dP);\n\n  return angleInRadians;\n};\n\nVec.update = (dest: Vector, src: Vector) => {\n  dest.x = src.x;\n  dest.y = src.y;\n};\n"],
  "mappings": "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",
  "names": []
}
