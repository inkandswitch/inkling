{
  "version": 3,
  "sources": ["/Users/admin/Work/Inkling/Prototypes/OldInputSystem/src/lib/arc.ts"],
  "sourcesContent": ["// Arc, defined by angles in radians\n\nimport { Position } from './types';\nimport Vec from './vec';\n\ninterface Arc {\n  center: Position;\n  radius: number;\n  startAngle: number;\n  endAngle: number;\n  clockwise: boolean;\n}\n\nfunction Arc(\n  center: Position,\n  radius: number,\n  startAngle: number,\n  endAngle: number,\n  clockwise = true\n): Arc {\n  return { center, radius, startAngle, endAngle, clockwise };\n}\n\nexport default Arc;\n\nArc.len = (arc: Arc) => {\n  const { radius, startAngle, endAngle } = arc;\n\n  // Calculate the arc length using the formula: arc length = radius * angle\n  const length = radius * Math.abs(endAngle - startAngle);\n\n  // Return the arc length\n  return length;\n};\n\n// TODO: Position should be declared in lib, not /app/strokes/Point\ninterface Circle {\n  center: Position;\n  radius: number;\n}\n\nArc.distToPointCircle = (circle: Circle, point: Position) => {\n  const distance = Vec.dist(circle.center, point);\n  return Math.abs(distance - circle.radius);\n};\n\nArc.spreadPointsAlong = (arc: Arc, n: number) => {\n  const points: Position[] = [];\n\n  const innerAngle = Arc.directedInnerAngle(arc);\n  const angleStep = innerAngle / (n - 1);\n\n  for (let i = 0; i < n; i++) {\n    const angle = arc.startAngle + angleStep * i;\n    const offset = Vec(\n      arc.radius * Math.cos(angle),\n      arc.radius * Math.sin(angle)\n    );\n    points.push(Vec.add(arc.center, offset));\n  }\n\n  return points;\n};\n\n// Computes the inner angle moving in correct direction (positive if clockwise, negative if counter clockwise)\nArc.directedInnerAngle = (arc: Arc) => {\n  const difference = arc.endAngle - arc.startAngle;\n  if (arc.clockwise && difference < 0) {\n    return 2 * Math.PI - Math.abs(difference);\n  } else if (!arc.clockwise && difference > 0) {\n    return -2 * Math.PI + Math.abs(difference);\n  } else {\n    return difference;\n  }\n};\n\nArc.points = (arc: Arc) => {\n  console.log(arc);\n\n  const start = Vec.add(arc.center, Vec.polar(arc.startAngle, arc.radius));\n  const end = Vec.add(arc.center, Vec.polar(arc.endAngle, arc.radius));\n\n  return { start, end };\n};\n"],
  "mappings": "AAGA;AAUA,aACE,QACA,QACA,YACA,UACA,YAAY,MACP;AACL,SAAO,CAAE,QAAQ,QAAQ,YAAY,UAAU;AAAA;AAGjD,eAAe;AAEf,IAAI,MAAM,CAAC,QAAa;AACtB,QAAM,CAAE,QAAQ,YAAY,YAAa;AAGzC,QAAM,SAAS,SAAS,KAAK,IAAI,WAAW;AAG5C,SAAO;AAAA;AAST,IAAI,oBAAoB,CAAC,QAAgB,UAAoB;AAC3D,QAAM,WAAW,IAAI,KAAK,OAAO,QAAQ;AACzC,SAAO,KAAK,IAAI,WAAW,OAAO;AAAA;AAGpC,IAAI,oBAAoB,CAAC,KAAU,MAAc;AAC/C,QAAM,SAAqB;AAE3B,QAAM,aAAa,IAAI,mBAAmB;AAC1C,QAAM,YAAY,aAAc,KAAI;AAEpC,WAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AAC1B,UAAM,QAAQ,IAAI,aAAa,YAAY;AAC3C,UAAM,SAAS,IACb,IAAI,SAAS,KAAK,IAAI,QACtB,IAAI,SAAS,KAAK,IAAI;AAExB,WAAO,KAAK,IAAI,IAAI,IAAI,QAAQ;AAAA;AAGlC,SAAO;AAAA;AAIT,IAAI,qBAAqB,CAAC,QAAa;AACrC,QAAM,aAAa,IAAI,WAAW,IAAI;AACtC,MAAI,IAAI,aAAa,aAAa,GAAG;AACnC,WAAO,IAAI,KAAK,KAAK,KAAK,IAAI;AAAA,aACrB,CAAC,IAAI,aAAa,aAAa,GAAG;AAC3C,WAAO,KAAK,KAAK,KAAK,KAAK,IAAI;AAAA,SAC1B;AACL,WAAO;AAAA;AAAA;AAIX,IAAI,SAAS,CAAC,QAAa;AACzB,UAAQ,IAAI;AAEZ,QAAM,QAAQ,IAAI,IAAI,IAAI,QAAQ,IAAI,MAAM,IAAI,YAAY,IAAI;AAChE,QAAM,MAAM,IAAI,IAAI,IAAI,QAAQ,IAAI,MAAM,IAAI,UAAU,IAAI;AAE5D,SAAO,CAAE,OAAO;AAAA;",
  "names": []
}
