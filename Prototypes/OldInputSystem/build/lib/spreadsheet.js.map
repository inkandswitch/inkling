{
  "version": 3,
  "sources": ["/Users/admin/Work/Inkling/Prototypes/OldInputSystem/src/lib/spreadsheet.ts"],
  "sourcesContent": ["const NOT_AVAILABLE = 'n/a';\n\ntype Formula<V, PVs, T> = (cell: Cell<V, PVs>) => T;\n\ninterface FormulasForProperty<V, PVs, T> {\n  first?: Formula<V, PVs, T>;\n  middle?: Formula<V, PVs, T> | Formula<V, PVs, T>[];\n  last?: Formula<V, PVs, T>;\n}\n\ntype FormulasForProperties<V, PVs> = {\n  [Property in keyof PVs]: FormulasForProperty<V, PVs, PVs[Property]>;\n};\n\nclass Cell<V, PVs> {\n  _prev: Cell<V, PVs> | null = null;\n  _next: Cell<V, PVs> | null = null;\n  propertyValues: Partial<PVs> = {};\n\n  constructor(private _value: V | null) {}\n\n  get value() {\n    if (this._value === null) {\n      throw NOT_AVAILABLE;\n    }\n    return this._value;\n  }\n\n  get<P extends keyof PVs>(property: P): PVs[P] {\n    const v = this.propertyValues[property];\n    if (v === undefined) {\n      throw NOT_AVAILABLE;\n    }\n    return v;\n  }\n\n  get prev() {\n    if (!this._prev) {\n      throw NOT_AVAILABLE;\n    }\n    return this._prev;\n  }\n\n  get next() {\n    if (!this._next) {\n      throw NOT_AVAILABLE;\n    }\n    return this._next;\n  }\n\n  clearProperties() {\n    this.propertyValues = {};\n  }\n\n  apply(formulasForProperties: FormulasForProperties<V, PVs>): boolean {\n    let didSomething = false;\n    for (const [property, formulas] of Object.entries(formulasForProperties)) {\n      didSomething =\n        // (Typecast to any required b/c Object.entries()'s type is too loose, sigh.)\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.computeProperty(property as keyof PVs, formulas as any) ||\n        didSomething;\n    }\n    return didSomething;\n  }\n\n  computeProperty(\n    property: keyof PVs,\n    formulas: FormulasForProperty<V, PVs, PVs[typeof property]>\n  ) {\n    if (!this._prev && formulas.first) {\n      return this.computePropertyWithFormula(property, formulas.first);\n    } else if (!this._next && formulas.last) {\n      return this.computePropertyWithFormula(property, formulas.last);\n    } else if (formulas.middle) {\n      const middles =\n        formulas.middle instanceof Array ? formulas.middle : [formulas.middle];\n      return middles.some(middle =>\n        this.computePropertyWithFormula(property, middle)\n      );\n    } else {\n      return false;\n    }\n  }\n\n  computePropertyWithFormula(\n    property: keyof PVs,\n    formula: Formula<V, PVs, PVs[typeof property]>\n  ) {\n    if (property in this.propertyValues) {\n      // already computed it!\n      return false;\n    }\n\n    try {\n      this.propertyValues[property] = formula(this);\n      return true;\n    } catch (e) {\n      if (e !== NOT_AVAILABLE) {\n        throw e;\n      }\n      return false;\n    }\n  }\n}\n\nclass Spreadsheet<V, PVs> {\n  readonly cells: Cell<V, PVs>[];\n\n  constructor(\n    values: V[],\n    private readonly formulas: FormulasForProperties<V, PVs>\n  ) {\n    this.cells = [];\n    for (const value of values) {\n      const cell = new Cell<V, PVs>(value);\n      if (this.cells.length > 0) {\n        const prev = this.cells[this.cells.length - 1];\n        cell._prev = prev;\n        prev._next = cell;\n      }\n      this.cells.push(cell);\n    }\n  }\n\n  compute(maxIterations = 1000) {\n    let n = 0;\n    while (n++ < maxIterations) {\n      let didSomething = false;\n      for (const cell of this.cells) {\n        didSomething = cell.apply(this.formulas) || didSomething;\n      }\n      if (!didSomething) {\n        break;\n      }\n    }\n    // console.log('done in', n, 'iterations');\n  }\n\n  getCellValues(): object[] {\n    return this.cells.map(cell => {\n      const obj: Record<string, V | PVs[keyof PVs] | null> = { _: cell.value };\n      for (const property of Object.keys(this.formulas)) {\n        obj[property] = cell.propertyValues[property as keyof PVs] ?? null;\n      }\n      return obj;\n    });\n  }\n}\n\nconst spreadsheet = new Spreadsheet<string, { n: number; v: string }>(\n  ['x', 'x', '', 'x', 'x', 'x'],\n  {\n    n: {\n      first: () => 1,\n      middle: cell => (cell.value !== 'x' ? 0 : cell.prev.get('n') + 1),\n    },\n    v: {\n      middle: cell =>\n        cell.get('n') > cell.next.get('n') ? '' + cell.get('n') : '',\n      last: cell => '' + cell.get('n'),\n    },\n  }\n);\nspreadsheet.compute();\nconsole.log(spreadsheet.getCellValues());\n"],
  "mappings": "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",
  "names": []
}
