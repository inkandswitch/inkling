{
  "version": 3,
  "sources": ["/Users/admin/Work/Inkling/Prototypes/OldInputSystem/src/app/Svg.ts"],
  "sourcesContent": ["import { clip } from '../lib/math';\nimport { Position, PositionWithPressure } from '../lib/types';\nimport Vec from '../lib/vec';\n\ntype Attributes = Record<string, string | number>;\n\nconst NS = 'http://www.w3.org/2000/svg';\n\nconst rootElm = document.querySelector('svg') as SVGSVGElement;\nconst nowElm = document.querySelector('#now') as SVGGElement;\n\nfunction add(\n  type: string,\n  attributes: Attributes = {},\n  parent: SVGElement = rootElm\n) {\n  return parent.appendChild(\n    update(document.createElementNS(NS, type), attributes)\n  );\n}\n\n/**\n * Use the sugar attribute `content` to set innerHTML.\n * E.g.: SVG.update(myTextElm, { content: 'hello' })\n */\nfunction update<T extends SVGElement>(elm: T, attributes: Attributes) {\n  Object.entries(attributes).forEach(([key, value]) => {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const cache = ((elm as any).__cache ||= {});\n    if (cache[key] === value) {\n      return;\n    }\n    cache[key] = value;\n\n    if (key === 'content') {\n      elm.innerHTML = '' + value;\n    } else {\n      elm.setAttribute(key, '' + value);\n    }\n  });\n  return elm;\n}\n\n// Store the current time whenever SVG.clearNow() is called, so that elements\n// created by SVG.now() will live for a duration relative to that time.\nlet lastTime = 0;\n\n/**\n * Puts an element on the screen for a brief moment, after which it's automatically deleted.\n * This allows for immediate-mode rendering \u2014 super useful for debug visuals.\n * By default, elements are removed whenever SVG.clearNow() is next called (typically every frame).\n * Include a `life` attribute to specify a minimum duration until the element is removed.\n */\nfunction now(type: string, attributes: Attributes) {\n  const life = +attributes.life || 0;\n  delete attributes.life;\n\n  const elm = add(type, attributes, nowElm);\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (elm as any).__expiry = lastTime + life;\n\n  return elm;\n}\n\n/**\n * Called every frame by App, but feel free to call it more frequently if needed\n * (E.g.: at the top of a loop body, so that only elements from the final iteration are shown).\n * Passing `currentTime` allows elements with a \"life\" to not be cleared until their time has passed.\n */\nfunction clearNow(currentTime = Infinity) {\n  if (isFinite(currentTime)) {\n    lastTime = currentTime;\n  }\n\n  for (const elm of Array.from(nowElm.children)) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const expiry = (elm as any).__expiry || 0;\n    if (currentTime > expiry) {\n      elm.remove();\n    }\n  }\n}\n\n/**\n * Helps you build a polyline from Positions (or arrays of Positions).\n * E.g.: SVG.now('polyline', { points: SVG.points(stroke.points), stroke: '#00F' });\n * E.g.: SVG.now('polyline', { points: SVG.points(pos1, pos2, posArr), stroke: '#F00' });\n */\nfunction points(...positions: Array<Position | Position[]>) {\n  return positions\n    .flat()\n    .map(p => p.x + ' ' + p.y)\n    .join(' ');\n}\n\n/**\n * Helps you build the path for a semicircular arc, which is normally a huge pain.\n * NB: Can only draw up to a half circle when mirror is false.\n */\nfunction arcPath(\n  center: Position, // Center of the (semi)circle\n  radius: number, // Radius of the (semi)circle\n  angle: number, // Direction to start the arc. Radians, 0 is rightward.\n  rotation: number, // Arc size of the (semi)circle. 0 to PI radians.\n  mirror = true // Mirror the arc across the start. Required to draw more than a half-circle.\n) {\n  // Values outside this range produce nonsense arcs\n  rotation = clip(rotation, -Math.PI, Math.PI);\n\n  let S = Vec.add(center, Vec.polar(angle, radius));\n  let path = '';\n\n  if (mirror) {\n    let B = Vec.add(center, Vec.polar(angle - rotation, radius));\n    path += `M ${B.x}, ${B.y} A ${radius},${radius} 0 0,1 ${S.x}, ${S.y}`;\n  } else {\n    path += `M ${S.x}, ${S.y}`;\n  }\n\n  let A = Vec.add(center, Vec.polar(angle + rotation, radius));\n  path += `A ${radius},${radius} 0 0,1 ${A.x}, ${A.y}`;\n\n  return path;\n}\n\n/** Returns a string that can be used as the 'd' attribute of an SVG path element. */\nfunction path(points: Position[] | PositionWithPressure[]) {\n  return points\n    .map((p, idx) => `${idx === 0 ? 'M' : 'L'} ${p.x} ${p.y}`)\n    .join(' ');\n}\n\nconst statusElement = add('text', {\n  x: 20,\n  content: '',\n  stroke: '#bbb',\n});\n\nlet statusHideTimeMillis = 0;\n\nfunction showStatus(text: string, time = 3_000) {\n  update(statusElement, {\n    content: text,\n    visibility: 'visible',\n    y: window.innerHeight - 5,\n  });\n  statusHideTimeMillis = Date.now() + time;\n  setTimeout(() => {\n    if (Date.now() >= statusHideTimeMillis) {\n      update(statusElement, { visibility: 'hidden' });\n    }\n  }, time);\n}\n\nexport default {\n  add,\n  update,\n  now,\n  clearNow,\n  points,\n  arcPath,\n  path,\n  showStatus,\n};\n"],
  "mappings": "AAAA;AAEA;AAIA,MAAM,KAAK;AAEX,MAAM,UAAU,SAAS,cAAc;AACvC,MAAM,SAAS,SAAS,cAAc;AAEtC,aACE,MACA,aAAyB,IACzB,SAAqB,SACrB;AACA,SAAO,OAAO,YACZ,OAAO,SAAS,gBAAgB,IAAI,OAAO;AAAA;AAQ/C,gBAAsC,KAAQ,YAAwB;AACpE,SAAO,QAAQ,YAAY,QAAQ,CAAC,CAAC,KAAK,WAAW;AAEnD,UAAM,QAAU,IAAY,YAAY;AACxC,QAAI,MAAM,SAAS,OAAO;AACxB;AAAA;AAEF,UAAM,OAAO;AAEb,QAAI,QAAQ,WAAW;AACrB,UAAI,YAAY,KAAK;AAAA,WAChB;AACL,UAAI,aAAa,KAAK,KAAK;AAAA;AAAA;AAG/B,SAAO;AAAA;AAKT,IAAI,WAAW;AAQf,aAAa,MAAc,YAAwB;AACjD,QAAM,OAAO,CAAC,WAAW,QAAQ;AACjC,SAAO,WAAW;AAElB,QAAM,MAAM,IAAI,MAAM,YAAY;AAGlC,EAAC,IAAY,WAAW,WAAW;AAEnC,SAAO;AAAA;AAQT,kBAAkB,cAAc,UAAU;AACxC,MAAI,SAAS,cAAc;AACzB,eAAW;AAAA;AAGb,aAAW,OAAO,MAAM,KAAK,OAAO,WAAW;AAE7C,UAAM,SAAU,IAAY,YAAY;AACxC,QAAI,cAAc,QAAQ;AACxB,UAAI;AAAA;AAAA;AAAA;AAUV,mBAAmB,WAAyC;AAC1D,SAAO,UACJ,OACA,IAAI,OAAK,EAAE,IAAI,MAAM,EAAE,GACvB,KAAK;AAAA;AAOV,iBACE,QACA,QACA,OACA,UACA,SAAS,MACT;AAEA,aAAW,KAAK,UAAU,CAAC,KAAK,IAAI,KAAK;AAEzC,MAAI,IAAI,IAAI,IAAI,QAAQ,IAAI,MAAM,OAAO;AACzC,MAAI,QAAO;AAEX,MAAI,QAAQ;AACV,QAAI,IAAI,IAAI,IAAI,QAAQ,IAAI,MAAM,QAAQ,UAAU;AACpD,aAAQ,KAAK,EAAE,MAAM,EAAE,OAAO,UAAU,gBAAgB,EAAE,MAAM,EAAE;AAAA,SAC7D;AACL,aAAQ,KAAK,EAAE,MAAM,EAAE;AAAA;AAGzB,MAAI,IAAI,IAAI,IAAI,QAAQ,IAAI,MAAM,QAAQ,UAAU;AACpD,WAAQ,KAAK,UAAU,gBAAgB,EAAE,MAAM,EAAE;AAEjD,SAAO;AAAA;AAIT,cAAc,SAA6C;AACzD,SAAO,QACJ,IAAI,CAAC,GAAG,QAAQ,GAAG,QAAQ,IAAI,MAAM,OAAO,EAAE,KAAK,EAAE,KACrD,KAAK;AAAA;AAGV,MAAM,gBAAgB,IAAI,QAAQ;AAAA,EAChC,GAAG;AAAA,EACH,SAAS;AAAA,EACT,QAAQ;AAAA;AAGV,IAAI,uBAAuB;AAE3B,oBAAoB,MAAc,OAAO,KAAO;AAC9C,SAAO,eAAe;AAAA,IACpB,SAAS;AAAA,IACT,YAAY;AAAA,IACZ,GAAG,OAAO,cAAc;AAAA;AAE1B,yBAAuB,KAAK,QAAQ;AACpC,aAAW,MAAM;AACf,QAAI,KAAK,SAAS,sBAAsB;AACtC,aAAO,eAAe,CAAE,YAAY;AAAA;AAAA,KAErC;AAAA;AAGL,eAAe;AAAA,EACb;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA;",
  "names": []
}
