{
  "version": 3,
  "sources": ["/Users/admin/Work/Inkling/Prototypes/OldInputSystem/src/app/tools/Tool.ts"],
  "sourcesContent": ["import Events from '../NativeEvents';\nimport { PositionWithPressure, PositionWithRadius } from '../../lib/types';\nimport SVG from '../Svg';\nimport Page from '../Page';\nimport Stroke from '../strokes/Stroke';\n\nexport default class Tool<S extends Stroke = Stroke> {\n  button: SVGElement;\n  private isSelected = false;\n  stroke?: S;\n\n  constructor(\n    label: string,\n    public buttonX: number,\n    public buttonY: number,\n    public page: Page,\n    public strokeClass?: { new (points: PositionWithPressure[]): S }\n  ) {\n    this.button = SVG.add('circle', { cx: buttonX, cy: buttonY, r: 20 });\n\n    SVG.add('text', { x: buttonX, y: buttonY, class: 'tool', content: label });\n\n    this.refreshButton();\n  }\n\n  onSelected() {\n    if (this.isSelected) {\n      this.onAction();\n    } else {\n      this.isSelected = true;\n      this.refreshButton();\n    }\n  }\n\n  onAction() {\n    // no op by default, but can be overridden by subclass\n  }\n\n  onDeselected() {\n    this.isSelected = false;\n    this.refreshButton();\n  }\n\n  update(events: Events) {\n    const pencilDown = events.find('pencil', 'began');\n    if (pencilDown) {\n      this.startStroke({ ...pencilDown.position, ...pencilDown });\n    }\n\n    const pencilMoves = events.findAll('pencil', 'moved');\n    if (this.stroke) {\n      pencilMoves.forEach(pencilMove => {\n        this.extendStroke({ ...pencilMove.position, ...pencilMove });\n      });\n    }\n\n    const pencilUp = events.find('pencil', 'ended');\n    if (pencilUp && this.stroke) {\n      this.endStroke();\n    }\n\n    const fingerDown = events.find('finger', 'began');\n    if (fingerDown) {\n      this.startFinger({ ...fingerDown.position, ...fingerDown });\n    }\n\n    const fingerMoves = events.findAll('finger', 'moved');\n    fingerMoves.forEach(fingerMove => {\n      this.moveFinger({ ...fingerMove.position, ...fingerMove });\n    });\n\n    const fingerUp = events.find('finger', 'ended');\n    if (fingerUp) {\n      this.endFinger();\n    }\n  }\n\n  startStroke(point: PositionWithPressure) {\n    if (this.strokeClass) {\n      this.stroke = this.page.addStroke(new this.strokeClass([point]));\n    }\n  }\n\n  extendStroke(point: PositionWithPressure) {\n    this.page.onstrokeUpdated(this.stroke!);\n    this.stroke!.points.push(point);\n  }\n\n  endStroke() {\n    this.page.onstrokeUpdated(this.stroke!);\n    this.stroke = undefined;\n  }\n\n  startFinger(_point: PositionWithRadius) {\n    // no op by default, but can be overridden by subclass\n  }\n\n  moveFinger(_point: PositionWithRadius) {\n    // no op by default, but can be overridden by subclass\n  }\n\n  endFinger() {\n    // no op by default, but can be overridden by subclass\n  }\n\n  render() {\n    // no op by default, but can be overridden by subclass\n  }\n\n  private refreshButton() {\n    SVG.update(this.button, {\n      fill: this.isSelected ? 'black' : 'lightgrey',\n    });\n  }\n}\n"],
  "mappings": "AAEA;AAIA,0BAAqD;AAAA,EAKnD,YACE,OACO,SACA,SACA,MACA,aACP;AAJO;AACA;AACA;AACA;AARD,sBAAa;AAUnB,SAAK,SAAS,IAAI,IAAI,UAAU,CAAE,IAAI,SAAS,IAAI,SAAS,GAAG;AAE/D,QAAI,IAAI,QAAQ,CAAE,GAAG,SAAS,GAAG,SAAS,OAAO,QAAQ,SAAS;AAElE,SAAK;AAAA;AAAA,EAGP,aAAa;AACX,QAAI,KAAK,YAAY;AACnB,WAAK;AAAA,WACA;AACL,WAAK,aAAa;AAClB,WAAK;AAAA;AAAA;AAAA,EAIT,WAAW;AAAA;AAAA,EAIX,eAAe;AACb,SAAK,aAAa;AAClB,SAAK;AAAA;AAAA,EAGP,OAAO,QAAgB;AACrB,UAAM,aAAa,OAAO,KAAK,UAAU;AACzC,QAAI,YAAY;AACd,WAAK,YAAY,IAAK,WAAW,aAAa;AAAA;AAGhD,UAAM,cAAc,OAAO,QAAQ,UAAU;AAC7C,QAAI,KAAK,QAAQ;AACf,kBAAY,QAAQ,gBAAc;AAChC,aAAK,aAAa,IAAK,WAAW,aAAa;AAAA;AAAA;AAInD,UAAM,WAAW,OAAO,KAAK,UAAU;AACvC,QAAI,YAAY,KAAK,QAAQ;AAC3B,WAAK;AAAA;AAGP,UAAM,aAAa,OAAO,KAAK,UAAU;AACzC,QAAI,YAAY;AACd,WAAK,YAAY,IAAK,WAAW,aAAa;AAAA;AAGhD,UAAM,cAAc,OAAO,QAAQ,UAAU;AAC7C,gBAAY,QAAQ,gBAAc;AAChC,WAAK,WAAW,IAAK,WAAW,aAAa;AAAA;AAG/C,UAAM,WAAW,OAAO,KAAK,UAAU;AACvC,QAAI,UAAU;AACZ,WAAK;AAAA;AAAA;AAAA,EAIT,YAAY,OAA6B;AACvC,QAAI,KAAK,aAAa;AACpB,WAAK,SAAS,KAAK,KAAK,UAAU,IAAI,KAAK,YAAY,CAAC;AAAA;AAAA;AAAA,EAI5D,aAAa,OAA6B;AACxC,SAAK,KAAK,gBAAgB,KAAK;AAC/B,SAAK,OAAQ,OAAO,KAAK;AAAA;AAAA,EAG3B,YAAY;AACV,SAAK,KAAK,gBAAgB,KAAK;AAC/B,SAAK,SAAS;AAAA;AAAA,EAGhB,YAAY,QAA4B;AAAA;AAAA,EAIxC,WAAW,QAA4B;AAAA;AAAA,EAIvC,YAAY;AAAA;AAAA,EAIZ,SAAS;AAAA;AAAA,EAID,gBAAgB;AACtB,QAAI,OAAO,KAAK,QAAQ;AAAA,MACtB,MAAM,KAAK,aAAa,UAAU;AAAA;AAAA;AAAA;",
  "names": []
}
