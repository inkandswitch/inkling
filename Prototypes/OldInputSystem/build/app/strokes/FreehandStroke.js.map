{
  "version": 3,
  "sources": ["/Users/admin/Work/Inkling/Prototypes/OldInputSystem/src/app/strokes/FreehandStroke.ts"],
  "sourcesContent": ["import { Position, PositionWithPressure } from '../../lib/types';\nimport { generateId } from '../../lib/helpers';\nimport StrokeGroup from './StrokeGroup';\nimport Vec from '../../lib/vec';\nimport Stroke from './Stroke';\nimport SVG from '../Svg';\n\nexport default class FreehandStroke extends Stroke {\n  readonly id = generateId();\n  private selected = false;\n  public group: StrokeGroup | null = null;\n  private highlight = SVG.add('polyline', {\n    fill: 'none',\n    stroke: 'rgba(255, 255, 0, 0.25)',\n    'stroke-width': 12,\n    visibility: 'hidden',\n  });\n\n  constructor(points: PositionWithPressure[]) {\n    super(points);\n    SVG.update(this.element, { stroke: 'rgba(0, 0, 0, .5)' });\n  }\n\n  updatePath(newPoints: Array<PositionWithPressure>) {\n    this.points = newPoints;\n  }\n\n  select() {\n    this.selected = true;\n  }\n\n  deselect() {\n    this.selected = false;\n  }\n\n  render() {\n    super.render();\n    SVG.update(this.highlight, {\n      points: this.element.getAttribute('points')!,\n      visibility: this.selected ? 'visible' : 'hidden',\n    });\n  }\n\n  getLocalDirection(index: number) {\n    const a = this.points[Math.max(index - 10, 0)];\n    const b = this.points[Math.min(index + 10, this.points.length - 1)];\n\n    return Vec.normalize(Vec.sub(b, a));\n  }\n\n  distanceBetweenPoints(a: number, b: number) {\n    let dist = 0;\n    for (let i = a; i < b - 1; i++) {\n      const pointA = this.points[i];\n      const pointB = this.points[i + 1];\n      dist += Vec.dist(pointA, pointB);\n    }\n\n    return dist;\n  }\n\n  minDistanceFrom(pos: Position) {\n    let minDistance = Infinity;\n    for (const point of this.points) {\n      minDistance = Math.min(minDistance, Vec.dist(point, pos));\n    }\n    return minDistance;\n  }\n}\n"],
  "mappings": "AACA;AAEA;AACA;AACA;AAEA,4CAA4C,OAAO;AAAA,EAWjD,YAAY,QAAgC;AAC1C,UAAM;AAXC,cAAK;AACN,oBAAW;AACZ,iBAA4B;AAC3B,qBAAY,IAAI,IAAI,YAAY;AAAA,MACtC,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,gBAAgB;AAAA,MAChB,YAAY;AAAA;AAKZ,QAAI,OAAO,KAAK,SAAS,CAAE,QAAQ;AAAA;AAAA,EAGrC,WAAW,WAAwC;AACjD,SAAK,SAAS;AAAA;AAAA,EAGhB,SAAS;AACP,SAAK,WAAW;AAAA;AAAA,EAGlB,WAAW;AACT,SAAK,WAAW;AAAA;AAAA,EAGlB,SAAS;AACP,UAAM;AACN,QAAI,OAAO,KAAK,WAAW;AAAA,MACzB,QAAQ,KAAK,QAAQ,aAAa;AAAA,MAClC,YAAY,KAAK,WAAW,YAAY;AAAA;AAAA;AAAA,EAI5C,kBAAkB,OAAe;AAC/B,UAAM,IAAI,KAAK,OAAO,KAAK,IAAI,QAAQ,IAAI;AAC3C,UAAM,IAAI,KAAK,OAAO,KAAK,IAAI,QAAQ,IAAI,KAAK,OAAO,SAAS;AAEhE,WAAO,IAAI,UAAU,IAAI,IAAI,GAAG;AAAA;AAAA,EAGlC,sBAAsB,GAAW,GAAW;AAC1C,QAAI,OAAO;AACX,aAAS,IAAI,GAAG,IAAI,IAAI,GAAG,KAAK;AAC9B,YAAM,SAAS,KAAK,OAAO;AAC3B,YAAM,SAAS,KAAK,OAAO,IAAI;AAC/B,cAAQ,IAAI,KAAK,QAAQ;AAAA;AAG3B,WAAO;AAAA;AAAA,EAGT,gBAAgB,KAAe;AAC7B,QAAI,cAAc;AAClB,eAAW,SAAS,KAAK,QAAQ;AAC/B,oBAAc,KAAK,IAAI,aAAa,IAAI,KAAK,OAAO;AAAA;AAEtD,WAAO;AAAA;AAAA;",
  "names": []
}
