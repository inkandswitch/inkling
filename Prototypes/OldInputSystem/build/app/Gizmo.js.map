{
  "version": 3,
  "sources": ["/Users/admin/Work/Inkling/Prototypes/OldInputSystem/src/app/Gizmo.ts"],
  "sourcesContent": ["import { TAU, clip, lerp } from '../lib/math';\nimport Events from './NativeEvents';\nimport Page from './Page';\nimport Selection from './Selection';\nimport SVG from './Svg';\nimport Handle from './strokes/Handle';\nimport Vec from '../lib/vec';\nimport { Position } from '../lib/types';\nimport FreehandStroke from './strokes/FreehandStroke';\nimport * as constraints from './constraints';\nimport Line from '../lib/line';\n\nfunction stroke(color: string, width = 6) {\n  return {\n    stroke: color,\n    fill: 'none',\n    'stroke-linecap': 'round',\n    'stroke-width': width,\n  };\n}\n\nconst green = 'color(display-p3 0 1 0.8)';\nconst grey = 'color(display-p3 0.8 0.8 0.8)';\n\nclass GizmoInstance {\n  private line: Line;\n  private center: Position;\n  private radius: number;\n\n  visible = true;\n\n  polarVectorConstraint: constraints.AddConstraintResult<'angle' | 'distance'>;\n  distanceConstraint: constraints.AddConstraintResult<never> | undefined;\n  angleConstraint: constraints.AddConstraintResult<never> | undefined;\n\n  constructor(\n    public a: Handle,\n    public b: Handle\n  ) {\n    this.line = this.updateLine();\n    this.center = this.updateCenter();\n    this.radius = this.updateRadius();\n    this.polarVectorConstraint = constraints.polarVector(a, b);\n  }\n\n  updateLine() {\n    const { a, b } = this;\n    // let a_b = Vec.renormalize(Vec.sub(b.position, a.position), 10000);\n    // return (this.line = Line(\n    //   Vec.sub(a.position, a_b),\n    //   Vec.add(b.position, a_b)\n    // ));\n    return (this.line = Line(a.position, b.position));\n  }\n\n  updateCenter() {\n    return (this.center = Vec.avg(this.a.position, this.b.position));\n  }\n\n  updateRadius() {\n    // let d = Vec.dist(this.b.position, this.a.position) / 2;\n    // let unscaled = lerp(d, 100, 200, 0, 1, true);\n    // let curved = 0.5 + 0.5 * unscaled ** 2;\n    // let scaled = lerp(curved, 0, 1, 100, 200, true);\n    // return (this.radius = Math.max(d, scaled));\n    return (this.radius = 20);\n  }\n\n  update(events: Events) {\n    const fingerDown = events.find('finger', 'began');\n\n    if (fingerDown) {\n      const dist = Line.distToPoint(this.line, fingerDown.position);\n      if (dist < 20) {\n        return true;\n      }\n    }\n\n    // const fingerMove = events.findLast('finger', 'moved');\n    // if (fingerMove) {\n    //   return true;\n    // }\n\n    const fingerUp = events.find('finger', 'ended');\n\n    if (fingerUp) {\n      if (Vec.dist(this.a.position, fingerUp.position) < 20) {\n        return true;\n      }\n      if (Vec.dist(this.b.position, fingerUp.position) < 20) {\n        return true;\n      }\n\n      const d = Vec.dist(this.center, fingerUp.position);\n      if (Math.abs(d - this.radius) < 20) {\n        if (!this.angleConstraint) {\n          this.angleConstraint = constraints.constant(\n            this.polarVectorConstraint.variables.angle,\n            Vec.angle(Vec.sub(this.b.position, this.a.position))\n          );\n        } else {\n          this.angleConstraint.remove();\n          this.angleConstraint = undefined;\n        }\n\n        return true;\n      }\n\n      if (Line.distToPoint(this.line, fingerUp.position) < 20) {\n        if (!this.distanceConstraint) {\n          this.distanceConstraint = constraints.constant(\n            this.polarVectorConstraint.variables.distance,\n            Vec.dist(this.a.position, this.b.position)\n          );\n        } else {\n          this.distanceConstraint.remove();\n          this.distanceConstraint = undefined;\n        }\n\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  render(_dt: number, _t: number) {\n    this.updateLine();\n    this.updateCenter();\n    this.updateRadius();\n\n    if (!this.visible) {\n      return;\n    }\n\n    SVG.now('circle', {\n      cx: this.center.x,\n      cy: this.center.y,\n      r: this.radius,\n      ...stroke(this.angleConstraint ? green : grey),\n    });\n\n    SVG.now('polyline', {\n      points: SVG.points(this.line.a, this.line.b),\n      ...stroke('#fff', 20),\n    });\n\n    SVG.now('polyline', {\n      points: SVG.points(this.line.a, this.line.b),\n      ...stroke(this.distanceConstraint ? green : grey, 3),\n    });\n  }\n}\n\nexport default class Gizmo {\n  all: GizmoInstance[] = [];\n\n  constructor(\n    public page: Page,\n    public selection: Selection,\n    public enabled = true\n  ) {\n    if (!enabled) {\n      return;\n    }\n    this.createStructure(\n      { x: 100, y: 500 },\n      { x: 400, y: 400 },\n      { x: 500, y: 200 },\n      { x: 600, y: 100 },\n      { x: 700, y: 300 },\n      { x: 600, y: 500 },\n      { x: 900, y: 600 }\n    );\n    this.page.strokeGroups.forEach(strokeGroup => {\n      const { a, b } = strokeGroup;\n      this.findOrCreate(a, b);\n    });\n  }\n\n  private addStrokeGroup(p1: Position, p2: Position) {\n    const stroke = this.page.addStroke(\n      new FreehandStroke([\n        { ...p1, pressure: 1 },\n        { ...p2, pressure: 1 },\n      ])\n    );\n    return this.page.addStrokeGroup(new Set([stroke]));\n  }\n\n  private createStructure(...positions: Position[]) {\n    for (let i = 1; i < positions.length; i++) {\n      const a = positions[i - 1];\n      const b = positions[i];\n      const { a: a1, b: b1 } = this.addStrokeGroup(a, b);\n    }\n  }\n\n  update(events: Events) {\n    if (!this.enabled) {\n      return;\n    }\n\n    // Assume all gizmos will be hidden\n    // this.all.forEach(v => (v.visible = false));\n\n    this.selection.touchingGizmo = false;\n\n    this.page.strokeGroups.forEach(strokeGroup => {\n      const { a, b } = strokeGroup;\n      const gizmo = this.findOrCreate(a, b);\n      if (gizmo.visible || a.isSelected || b.isSelected) {\n        gizmo.visible = true; // Show this gizmo\n        const didTouch = gizmo.update(events);\n        this.selection.touchingGizmo ||= didTouch;\n      } else {\n        gizmo.visible = false;\n      }\n    });\n  }\n\n  private findOrCreate(a: Handle, b: Handle) {\n    // Sort a and b so that a has the lower id\n    if (a.id > b.id) {\n      [a, b] = [b, a];\n    }\n    let giz = this.all.find(gizmo => gizmo.a === a && gizmo.b === b);\n    if (!giz) {\n      this.all.push((giz = new GizmoInstance(a, b)));\n    }\n    return giz;\n  }\n\n  render(dt: number, t: number) {\n    this.all.forEach(gizmo => gizmo.render(dt, t));\n    //   this.selection.distPos = null;\n    //   this.selection.anglePos = null;\n    //   if (Object.values(this.selection.dragging).length == 2) this.crossbow();\n  }\n\n  // crossbow() {\n  //   let dist = Vec.dist(a.position, b.position);\n\n  //   let superA = Vec.lerp(b.position, a.position, 10_000);\n  //   let superB = Vec.lerp(a.position, b.position, 10_000);\n\n  //   SVG.now('polyline', {\n  //     points: SVG.points(superA, superB),\n  //     ...green,\n  //   });\n\n  //   let theta = Vec.angle(Vec.sub(b.position, a.position));\n\n  //   let wedge = Math.PI;\n\n  //   let C = Vec.avg(a.position, b.position);\n  //   dist /= 2;\n  //   let D = Vec.add(C, Vec.polar(theta, dist));\n  //   let O = Vec.add(C, Vec.polar(theta + wedge / 2, dist));\n  //   let N = Vec.add(C, Vec.polar(theta - wedge / 2, dist));\n\n  //   let A = {\n  //     d: `\n  //     M ${D.x}, ${D.y}\n  //     A ${dist},${dist} 0 0,1  ${O.x}, ${O.y}\n  //     M ${D.x}, ${D.y}\n  //     A ${dist},${dist} 0 0,0  ${N.x}, ${N.y}\n  //   `,\n  //   };\n  //   SVG.now('path', { ...blue, ...A });\n\n  //   D = Vec.add(C, Vec.polar(theta, -dist));\n  //   O = Vec.add(C, Vec.polar(theta + wedge / 2, -dist));\n  //   N = Vec.add(C, Vec.polar(theta - wedge / 2, -dist));\n\n  //   let B = {\n  //     d: `\n  //     M ${D.x}, ${D.y}\n  //     A ${dist},${dist} 0 0,1  ${O.x}, ${O.y}\n  //     M ${D.x}, ${D.y}\n  //     A ${dist},${dist} 0 0,0  ${N.x}, ${N.y}\n  //   `,\n  //   };\n\n  //   SVG.now('path', { ...blue, ...B });\n\n  //   this.selection.distPos = C;\n\n  //   if (this.selection.distLocked) {\n  //   }\n  // }\n}\n"],
  "mappings": "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",
  "names": []
}
