{
  "version": 3,
  "sources": ["/Users/admin/Work/Inkling/InkbaseV2/src/app/gestures/Gesture.ts"],
  "sourcesContent": ["import { root } from '../GameObject';\nimport Events, {\n  Event,\n  InputState,\n  EventState,\n  TouchId,\n} from '../NativeEvents';\nimport MetaToggle from '../gui/MetaToggle';\nimport SVG from '../Svg';\n\nexport type EventContext = {\n  event: Event; // The current event we're processing.\n  state: InputState; // The current state of the pencil or finger that generated this event.\n  events: Events; // The full NativeEvents instance, so we can look at other the pencils/fingers.\n  root: typeof root; // The root of the scene graph\n  page: typeof root.page; // The current page the user is interacting with\n  metaToggle: MetaToggle;\n  pseudo: boolean;\n  pseudoCount: number;\n  pseudoTouches: Record<TouchId, Event>;\n};\n\ntype GestureAPI = Partial<{\n  claim: 'pencil' | 'finger' | 'fingers' | PredicateFn;\n  pseudo: boolean;\n  began: EventHandler;\n  moved: EventHandler;\n  dragged: EventHandler;\n  ended: EventHandler;\n  done: VoidFn;\n  render: VoidFn;\n}>;\n\ntype VoidFn = () => void;\ntype PredicateFn = (ctx: EventContext) => boolean;\ntype EventHandler = (ctx: EventContext) => EventHandlerResult;\n// TODO: should this be a type parameter of EventHandler?\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype EventHandlerResult = Gesture | any;\ntype EventHandlerName = EventState | 'dragged';\n\nexport class Gesture {\n  public lastUpdated = 0;\n\n  private touches: Record<TouchId, Event> = {};\n\n  constructor(\n    public label: string,\n    public api: GestureAPI\n  ) {}\n\n  claimsTouch(ctx: EventContext): boolean {\n    const typeIsPencil = ctx.event.type === 'pencil';\n    const typeIsFinger = ctx.event.type === 'finger';\n    const oneFinger = ctx.events.fingerStates.length === 1;\n    const typeMatchesClaim = this.api.claim === ctx.event.type;\n    const claimIsFingers = this.api.claim === 'fingers';\n\n    // claim \"pencil\" to match the pencil\n    if (typeMatchesClaim && typeIsPencil) {\n      return true;\n    }\n\n    // claim \"finger\" to match only one finger\n    if (typeMatchesClaim && typeIsFinger && oneFinger) {\n      return true;\n    }\n\n    // claim \"fingers\" to match all subsequent fingers\n    if (typeIsFinger && claimIsFingers) {\n      return true;\n    }\n\n    // Custom claim function\n    if (this.api.claim instanceof Function) {\n      return this.api.claim(ctx);\n    }\n\n    return false;\n  }\n\n  applyEvent(ctx: EventContext) {\n    this.lastUpdated = performance.now();\n\n    let eventHandlerName: EventHandlerName = ctx.event.state;\n\n    // Synthetic \"dragged\" event\n    if (eventHandlerName === 'moved' && ctx.state.drag && this.api.dragged) {\n      eventHandlerName = 'dragged';\n    }\n\n    // Run the event handler\n    const result = this.api[eventHandlerName]?.call(this, ctx);\n\n    // Track which touches we've claimed, and run the `done` handler when they're all released\n    if (ctx.event.state !== 'ended') {\n      this.touches[ctx.event.id] = ctx.event;\n    } else {\n      delete this.touches[ctx.event.id];\n      if (Object.keys(this.touches).length === 0) {\n        this.api.done?.call(this);\n      }\n    }\n\n    return result;\n  }\n\n  render() {\n    this.api.render?.call(this);\n  }\n\n  debugRender() {\n    for (const id in this.touches) {\n      const event = this.touches[id];\n      const elm = SVG.now('g', {\n        class: 'gesture',\n        transform: SVG.positionToTransform(event.position),\n      });\n      SVG.add('circle', elm, { r: event.type === 'pencil' ? 2 : 8 });\n      SVG.add('text', elm, { content: this.label });\n    }\n  }\n}\n"],
  "mappings": "AAQA;AAiCO,qBAAc;AAAA,EAKnB,YACS,OACA,KACP;AAFO;AACA;AANF,uBAAc;AAEb,mBAAkC;AAAA;AAAA,EAO1C,YAAY,KAA4B;AACtC,UAAM,eAAe,IAAI,MAAM,SAAS;AACxC,UAAM,eAAe,IAAI,MAAM,SAAS;AACxC,UAAM,YAAY,IAAI,OAAO,aAAa,WAAW;AACrD,UAAM,mBAAmB,KAAK,IAAI,UAAU,IAAI,MAAM;AACtD,UAAM,iBAAiB,KAAK,IAAI,UAAU;AAG1C,QAAI,oBAAoB,cAAc;AACpC,aAAO;AAAA;AAIT,QAAI,oBAAoB,gBAAgB,WAAW;AACjD,aAAO;AAAA;AAIT,QAAI,gBAAgB,gBAAgB;AAClC,aAAO;AAAA;AAIT,QAAI,KAAK,IAAI,iBAAiB,UAAU;AACtC,aAAO,KAAK,IAAI,MAAM;AAAA;AAGxB,WAAO;AAAA;AAAA,EAGT,WAAW,KAAmB;AAC5B,SAAK,cAAc,YAAY;AAE/B,QAAI,mBAAqC,IAAI,MAAM;AAGnD,QAAI,qBAAqB,WAAW,IAAI,MAAM,QAAQ,KAAK,IAAI,SAAS;AACtE,yBAAmB;AAAA;AAIrB,UAAM,SAAS,KAAK,IAAI,mBAAmB,KAAK,MAAM;AAGtD,QAAI,IAAI,MAAM,UAAU,SAAS;AAC/B,WAAK,QAAQ,IAAI,MAAM,MAAM,IAAI;AAAA,WAC5B;AACL,aAAO,KAAK,QAAQ,IAAI,MAAM;AAC9B,UAAI,OAAO,KAAK,KAAK,SAAS,WAAW,GAAG;AAC1C,aAAK,IAAI,MAAM,KAAK;AAAA;AAAA;AAIxB,WAAO;AAAA;AAAA,EAGT,SAAS;AACP,SAAK,IAAI,QAAQ,KAAK;AAAA;AAAA,EAGxB,cAAc;AACZ,eAAW,MAAM,KAAK,SAAS;AAC7B,YAAM,QAAQ,KAAK,QAAQ;AAC3B,YAAM,MAAM,IAAI,IAAI,KAAK;AAAA,QACvB,OAAO;AAAA,QACP,WAAW,IAAI,oBAAoB,MAAM;AAAA;AAE3C,UAAI,IAAI,UAAU,KAAK,CAAE,GAAG,MAAM,SAAS,WAAW,IAAI;AAC1D,UAAI,IAAI,QAAQ,KAAK,CAAE,SAAS,KAAK;AAAA;AAAA;AAAA;",
  "names": []
}
