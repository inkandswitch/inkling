{
  "version": 3,
  "sources": ["/Users/admin/Work/Inkling/InkbaseV2/src/app/gestures/Handle.ts"],
  "sourcesContent": ["import { EventContext, Gesture } from './Gesture';\nimport Handle, { aCanonicalHandle } from '../ink/Handle';\nimport * as constraints from '../constraints';\nimport StrokeGroup from '../ink/StrokeGroup';\nimport Vec from '../../lib/vec';\nimport SVG from '../Svg';\nimport Config from '../Config';\nimport { Position } from '../../lib/types';\n\nexport function touchHandle(ctx: EventContext): Gesture | void {\n  let handle = ctx.page.find({\n    what: aCanonicalHandle,\n    near: ctx.event.position,\n    tooFar: 40,\n  });\n\n  if (handle) {\n    if (\n      ctx.pseudoCount >= 3 &&\n      handle.canonicalInstance.absorbedHandles.size > 0\n    ) {\n      const handles = [...handle.canonicalInstance.absorbedHandles];\n      handle = handle.breakOff(handles[handles.length - 1]);\n    }\n\n    return touchHandleHelper(handle);\n  }\n}\n\nexport function touchHandleHelper(handle: Handle): Gesture {\n  let lastPos = Vec.clone(handle);\n  let offset: Position;\n\n  return new Gesture('Touch Handle', {\n    began(ctx) {\n      offset = Vec.sub(handle.position, ctx.event.position);\n      if (Config.gesture.lookAt) {\n        lastPos = Vec.clone(handle);\n      } else {\n        constraints.finger(handle);\n      }\n    },\n    moved(ctx) {\n      handle.position = Vec.add(ctx.event.position, offset);\n\n      if (Config.gesture.lookAt) {\n        lastPos = Vec.clone(handle);\n      } else {\n        constraints.finger(handle);\n      }\n\n      if (\n        ctx.pseudoCount === 2 &&\n        handle.parent instanceof StrokeGroup &&\n        handle.canonicalInstance.absorbedHandles.size === 0\n      ) {\n        handle.parent.generatePointData();\n      }\n    },\n    ended(ctx) {\n      handle.getAbsorbedByNearestHandle();\n      if (!Config.gesture.lookAt) {\n        constraints.finger(handle).remove();\n      }\n      if (!ctx.state.drag && ctx.metaToggle.active) {\n        handle.togglePin();\n      }\n    },\n    render() {\n      if (Config.gesture.lookAt) {\n        const count = Math.pow(Vec.dist(handle.position, lastPos), 1 / 3);\n        let c = count;\n        while (--c > 0) {\n          let v = Vec.sub(handle.position, lastPos);\n          v = Vec.add(lastPos, Vec.mulS(v, c / count));\n          SVG.now('circle', {\n            cx: v.x,\n            cy: v.y,\n            r: 4,\n            class: 'desire',\n          });\n        }\n      }\n    },\n  });\n}\n"],
  "mappings": "AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGO,4BAAqB,KAAmC;AAC7D,MAAI,SAAS,IAAI,KAAK,KAAK;AAAA,IACzB,MAAM;AAAA,IACN,MAAM,IAAI,MAAM;AAAA,IAChB,QAAQ;AAAA;AAGV,MAAI,QAAQ;AACV,QACE,IAAI,eAAe,KACnB,OAAO,kBAAkB,gBAAgB,OAAO,GAChD;AACA,YAAM,UAAU,CAAC,GAAG,OAAO,kBAAkB;AAC7C,eAAS,OAAO,SAAS,QAAQ,QAAQ,SAAS;AAAA;AAGpD,WAAO,kBAAkB;AAAA;AAAA;AAItB,kCAA2B,QAAyB;AACzD,MAAI,UAAU,IAAI,MAAM;AACxB,MAAI;AAEJ,SAAO,IAAI,QAAQ,gBAAgB;AAAA,IACjC,MAAM,KAAK;AACT,eAAS,IAAI,IAAI,OAAO,UAAU,IAAI,MAAM;AAC5C,UAAI,OAAO,QAAQ,QAAQ;AACzB,kBAAU,IAAI,MAAM;AAAA,aACf;AACL,oBAAY,OAAO;AAAA;AAAA;AAAA,IAGvB,MAAM,KAAK;AACT,aAAO,WAAW,IAAI,IAAI,IAAI,MAAM,UAAU;AAE9C,UAAI,OAAO,QAAQ,QAAQ;AACzB,kBAAU,IAAI,MAAM;AAAA,aACf;AACL,oBAAY,OAAO;AAAA;AAGrB,UACE,IAAI,gBAAgB,KACpB,OAAO,kBAAkB,eACzB,OAAO,kBAAkB,gBAAgB,SAAS,GAClD;AACA,eAAO,OAAO;AAAA;AAAA;AAAA,IAGlB,MAAM,KAAK;AACT,aAAO;AACP,UAAI,CAAC,OAAO,QAAQ,QAAQ;AAC1B,oBAAY,OAAO,QAAQ;AAAA;AAE7B,UAAI,CAAC,IAAI,MAAM,QAAQ,IAAI,WAAW,QAAQ;AAC5C,eAAO;AAAA;AAAA;AAAA,IAGX,SAAS;AACP,UAAI,OAAO,QAAQ,QAAQ;AACzB,cAAM,QAAQ,KAAK,IAAI,IAAI,KAAK,OAAO,UAAU,UAAU,IAAI;AAC/D,YAAI,IAAI;AACR,eAAO,EAAE,IAAI,GAAG;AACd,cAAI,IAAI,IAAI,IAAI,OAAO,UAAU;AACjC,cAAI,IAAI,IAAI,SAAS,IAAI,KAAK,GAAG,IAAI;AACrC,cAAI,IAAI,UAAU;AAAA,YAChB,IAAI,EAAE;AAAA,YACN,IAAI,EAAE;AAAA,YACN,GAAG;AAAA,YACH,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;",
  "names": []
}
