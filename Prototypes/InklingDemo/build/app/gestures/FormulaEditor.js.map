{
  "version": 3,
  "sources": ["/Users/admin/Work/Inkling/InkbaseV2/src/app/gestures/FormulaEditor.ts"],
  "sourcesContent": ["import { aFormula } from '../meta/Formula';\nimport FormulaStroke from '../ink/FormulaStroke';\nimport { aWritingCell } from '../meta/WritingCell';\nimport { EventContext, Gesture } from './Gesture';\n// import { aPrimaryToken } from '../meta/Token';\n// import { isLabelToken } from '../meta/token-helpers';\n\nexport function tapFormulaLabel(ctx: EventContext): Gesture | void {\n  // TODO: Rewrite\n  // if (ctx.metaToggle.active && ctx.formulaEditor.isActive()) {\n  //   const primaryToken = ctx.page.find({\n  //     what: aPrimaryToken,\n  //     near: ctx.event.position,\n  //   });\n  //   if (primaryToken && isLabelToken(primaryToken)) {\n  //     return new Gesture('Tap Formula Label', {\n  //       ended: () =>\n  //         ctx.formulaEditor.addLabelTokenFromExisting(primaryToken.label),\n  //     });\n  //   }\n  // }\n}\n\nexport function pencilFormulaEditor(ctx: EventContext): Gesture | void {\n  if (!ctx.metaToggle.active) {\n    return;\n  }\n\n  const writingCell = ctx.root.find({\n    what: aWritingCell,\n    near: ctx.event.position,\n    recursive: true,\n  });\n\n  if (writingCell) {\n    const stroke = ctx.page.addStroke(new FormulaStroke());\n    return new Gesture('Writing In Formula Editor', {\n      moved(ctx) {\n        stroke.points.push(ctx.event.position);\n      },\n      ended(_ctx) {\n        writingCell.captureStroke(stroke);\n      },\n    });\n  }\n\n  // TODO: Rewrite\n\n  // if (ctx.metaToggle.active && ctx.formulaEditor.isActive()) {\n  //   const formulaEditor = ctx.root.find({\n  //     what: aFormulaEditor,\n  //     near: ctx.event.position,\n  //     recursive: false,\n  //   });\n\n  //   const stroke = ctx.page.addStroke(new FormulaStroke());\n\n  //   if (formulaEditor) {\n  //     if (ctx.pseudo) {\n  //       return new Gesture('Pseudo Tap Formula Editor', {\n  //         began(ctx) {\n  //           formulaEditor.switchCellMode(ctx.event.position);\n  //         },\n  //       });\n  //     } else {\n  //       return new Gesture('Writing In Formula Editor', {\n  //         moved(ctx) {\n  //           stroke.points.push(ctx.event.position);\n  //         },\n  //         ended(_ctx) {\n  //           formulaEditor.captureStroke(stroke);\n  //         },\n  //       });\n  //     }\n  //   }\n  // }\n}\n\nexport function closeFormulaEditor(ctx: EventContext): Gesture | void {\n  // This one is a bit weird.\n  // We don't actually need to claim the 3rd finger, so we just perform the effect right away.\n  if (\n    ctx.pseudoCount >= 2 && // two pseudo fingers plus\u2026\n    ctx.event.type === 'finger' // \u2026one more finger.\n  ) {\n    for (const formula of ctx.root.findAll({ what: aFormula })) {\n      formula.close();\n    }\n  }\n}\n"],
  "mappings": "AAAA;AACA;AACA;AACA;AAIO,gCAAyB,KAAmC;AAAA;AAgB5D,oCAA6B,KAAmC;AACrE,MAAI,CAAC,IAAI,WAAW,QAAQ;AAC1B;AAAA;AAGF,QAAM,cAAc,IAAI,KAAK,KAAK;AAAA,IAChC,MAAM;AAAA,IACN,MAAM,IAAI,MAAM;AAAA,IAChB,WAAW;AAAA;AAGb,MAAI,aAAa;AACf,UAAM,SAAS,IAAI,KAAK,UAAU,IAAI;AACtC,WAAO,IAAI,QAAQ,6BAA6B;AAAA,MAC9C,MAAM,MAAK;AACT,eAAO,OAAO,KAAK,KAAI,MAAM;AAAA;AAAA,MAE/B,MAAM,MAAM;AACV,oBAAY,cAAc;AAAA;AAAA;AAAA;AAAA;AAqC3B,mCAA4B,KAAmC;AAGpE,MACE,IAAI,eAAe,KACnB,IAAI,MAAM,SAAS,UACnB;AACA,eAAW,WAAW,IAAI,KAAK,QAAQ,CAAE,MAAM,YAAa;AAC1D,cAAQ;AAAA;AAAA;AAAA;",
  "names": []
}
