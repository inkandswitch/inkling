{
  "version": 3,
  "sources": ["/Users/admin/Work/Inkling/InkbaseV2/src/app/gestures/Token.ts"],
  "sourcesContent": ["import { EventContext, Gesture } from './Gesture';\nimport { aPrimaryToken, aToken } from '../meta/Token';\nimport { isNumberToken } from '../meta/token-helpers';\nimport Vec from '../../lib/vec';\n\nexport function touchToken(ctx: EventContext): Gesture | void {\n  if (!ctx.metaToggle.active) {\n    return;\n  }\n\n  const token = ctx.page.find({\n    what: aToken,\n    near: ctx.event.position,\n  });\n\n  if (!token) {\n    return;\n  }\n\n  const offset = Vec.sub(token.position, ctx.event.position);\n\n  return new Gesture('Touch Token', {\n    dragged(ctx) {\n      token.position = Vec.add(ctx.event.position, offset);\n    },\n    ended(ctx) {\n      if (!ctx.state.drag) {\n        const primaryToken = ctx.page.find({\n          what: aPrimaryToken,\n          near: ctx.event.position,\n        });\n        if (isNumberToken(primaryToken)) {\n          primaryToken.onTap();\n        }\n      }\n    },\n  });\n}\n\nexport function scrubNumberToken(ctx: EventContext): Gesture | void {\n  if (!(ctx.metaToggle.active && ctx.pseudo)) {\n    return;\n  }\n\n  const token = ctx.page.find({\n    what: aPrimaryToken,\n    near: ctx.event.position,\n  });\n\n  if (!isNumberToken(token)) {\n    return;\n  }\n\n  const v = token.getVariable();\n  const wasLocked = v.isLocked;\n  let initialY = ctx.event.position.y;\n  let initialValue = v.value;\n  let fingers = 0;\n\n  return new Gesture('Scrub Number Token', {\n    moved(ctx) {\n      if (fingers !== ctx.pseudoCount) {\n        fingers = ctx.pseudoCount;\n        initialValue = v.value;\n        initialY = ctx.event.position.y;\n      }\n      const delta = initialY - ctx.event.position.y;\n      const m = 1 / Math.pow(10, fingers - 1);\n      const value = Math.round((initialValue + delta * m) / m) * m;\n      token.getVariable().lock(value, true);\n    },\n    ended(ctx) {\n      if (!wasLocked) {\n        token.getVariable().unlock();\n      }\n    },\n  });\n}\n"],
  "mappings": "AAAA;AACA;AACA;AACA;AAEO,2BAAoB,KAAmC;AAC5D,MAAI,CAAC,IAAI,WAAW,QAAQ;AAC1B;AAAA;AAGF,QAAM,QAAQ,IAAI,KAAK,KAAK;AAAA,IAC1B,MAAM;AAAA,IACN,MAAM,IAAI,MAAM;AAAA;AAGlB,MAAI,CAAC,OAAO;AACV;AAAA;AAGF,QAAM,SAAS,IAAI,IAAI,MAAM,UAAU,IAAI,MAAM;AAEjD,SAAO,IAAI,QAAQ,eAAe;AAAA,IAChC,QAAQ,MAAK;AACX,YAAM,WAAW,IAAI,IAAI,KAAI,MAAM,UAAU;AAAA;AAAA,IAE/C,MAAM,MAAK;AACT,UAAI,CAAC,KAAI,MAAM,MAAM;AACnB,cAAM,eAAe,KAAI,KAAK,KAAK;AAAA,UACjC,MAAM;AAAA,UACN,MAAM,KAAI,MAAM;AAAA;AAElB,YAAI,cAAc,eAAe;AAC/B,uBAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAOhB,iCAA0B,KAAmC;AAClE,MAAI,CAAE,KAAI,WAAW,UAAU,IAAI,SAAS;AAC1C;AAAA;AAGF,QAAM,QAAQ,IAAI,KAAK,KAAK;AAAA,IAC1B,MAAM;AAAA,IACN,MAAM,IAAI,MAAM;AAAA;AAGlB,MAAI,CAAC,cAAc,QAAQ;AACzB;AAAA;AAGF,QAAM,IAAI,MAAM;AAChB,QAAM,YAAY,EAAE;AACpB,MAAI,WAAW,IAAI,MAAM,SAAS;AAClC,MAAI,eAAe,EAAE;AACrB,MAAI,UAAU;AAEd,SAAO,IAAI,QAAQ,sBAAsB;AAAA,IACvC,MAAM,MAAK;AACT,UAAI,YAAY,KAAI,aAAa;AAC/B,kBAAU,KAAI;AACd,uBAAe,EAAE;AACjB,mBAAW,KAAI,MAAM,SAAS;AAAA;AAEhC,YAAM,QAAQ,WAAW,KAAI,MAAM,SAAS;AAC5C,YAAM,IAAI,IAAI,KAAK,IAAI,IAAI,UAAU;AACrC,YAAM,QAAQ,KAAK,MAAO,gBAAe,QAAQ,KAAK,KAAK;AAC3D,YAAM,cAAc,KAAK,OAAO;AAAA;AAAA,IAElC,MAAM,MAAK;AACT,UAAI,CAAC,WAAW;AACd,cAAM,cAAc;AAAA;AAAA;AAAA;AAAA;",
  "names": []
}
