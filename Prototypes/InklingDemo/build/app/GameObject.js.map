{
  "version": 3,
  "sources": ["/Users/admin/Work/Inkling/InkbaseV2/src/app/GameObject.ts"],
  "sourcesContent": ["import { forDebugging } from '../lib/helpers';\nimport { Position } from '../lib/types';\nimport Page from './Page';\nimport SVG from './Svg';\n\nconst DEFAULT_TOO_FAR = 20;\n\nexport interface FindOptions<T extends GameObject> {\n  what(gameObj: GameObject): T | null;\n  that?(gameObj: T): boolean;\n  recursive?: boolean;\n  near?: Position;\n  tooFar?: number;\n}\n\ninterface ForEachOptions<T extends GameObject> extends FindOptions<T> {\n  do(gameObj: T): void;\n}\n\nexport abstract class GameObject {\n  maxHp = 0;\n  hp = this.maxHp;\n\n  parent: GameObject | null = null;\n  readonly children = new Set<GameObject>();\n\n  constructor(parent?: GameObject) {\n    if (parent) {\n      parent.adopt(this);\n    }\n  }\n\n  get page(): Page {\n    let p = this.parent;\n    while (p) {\n      if (p instanceof Page) {\n        return p;\n      }\n      p = p.parent;\n    }\n\n    // If we get to this point, this object does not belong to a page.\n    // But the root object knows what the current page is, so we can\n    // return that.\n    return this.root.page;\n  }\n\n  get root(): GameObject {\n    let p: GameObject = this;\n    while (p.parent) {\n      p = p.parent;\n    }\n    return p;\n  }\n\n  adopt<T extends GameObject>(child: T): T {\n    child.parent?.children.delete(child);\n    this.children.add(child);\n    child.parent = this;\n    return child;\n  }\n\n  remove() {\n    // TODO: remove my children here?\n    this.parent?.children.delete(this);\n    this.parent = null;\n  }\n\n  /** This method is preferred over child.remove() b/c of the sanity check. */\n  removeChild(child: GameObject) {\n    if (!this.children.has(child)) {\n      throw new Error('GameObject.removeChild() called w/ non-child argument!');\n    }\n    child.remove();\n  }\n\n  abstract render(dt: number, t: number): void;\n\n  // TODO: write comment for this method\n  abstract distanceToPoint(point: Position): number | null;\n\n  find<T extends GameObject>(options: FindOptions<T>): T | null {\n    const {\n      what,\n      that,\n      recursive,\n      near: pos,\n      tooFar = DEFAULT_TOO_FAR,\n    } = options;\n    let nearestDist = tooFar;\n    let ans: T | null = null;\n    this.forEach({\n      what,\n      that,\n      recursive,\n      do(gameObj) {\n        if (pos) {\n          const dist = gameObj.distanceToPoint(pos);\n          if (dist !== null && dist <= nearestDist) {\n            ans = gameObj;\n            nearestDist = dist;\n          }\n        } else {\n          if (ans === null) {\n            ans = gameObj;\n          }\n        }\n      },\n    });\n    return ans;\n  }\n\n  findAll<T extends GameObject>(options: FindOptions<T>) {\n    const ans = [] as T[];\n    this.forEach({\n      ...options,\n      do(gameObj) {\n        ans.push(gameObj);\n      },\n    });\n    return ans;\n  }\n\n  forEach<T extends GameObject>(options: ForEachOptions<T>) {\n    const {\n      what,\n      that,\n      recursive = true,\n      near: pos,\n      tooFar = DEFAULT_TOO_FAR,\n      do: doFn,\n    } = options;\n\n    for (const gameObj of this.children) {\n      if (recursive) {\n        gameObj.forEach(options);\n      }\n\n      const narrowedGameObj = what(gameObj);\n      if (!narrowedGameObj || (that && !that(narrowedGameObj))) {\n        continue;\n      }\n\n      if (pos) {\n        const dist = narrowedGameObj.distanceToPoint(pos);\n        if (dist === null || dist >= tooFar) {\n          continue;\n        }\n      }\n\n      doFn.call(this, narrowedGameObj);\n    }\n  }\n\n  bringToFront() {\n    for (const obj of Object.values(this)) {\n      if (obj instanceof SVGElement) {\n        SVG.bringToFront(obj);\n      }\n    }\n  }\n}\n\nexport const aGameObject = (gameObj: GameObject) => gameObj;\n\nexport const root = new (class extends GameObject {\n  currentPage: Page | null = null;\n\n  get page() {\n    return this.currentPage!;\n  }\n\n  distanceToPoint(point: Position) {\n    return null;\n  }\n\n  render(dt: number, t: number) {\n    for (const child of this.children) {\n      child.render(dt, t);\n    }\n  }\n})();\n\nforDebugging('root', root);\n"],
  "mappings": "AAAA;AAEA;AACA;AAEA,MAAM,kBAAkB;AAcjB,wBAA0B;AAAA,EAO/B,YAAY,QAAqB;AANjC,iBAAQ;AACR,cAAK,KAAK;AAEV,kBAA4B;AACnB,oBAAW,IAAI;AAGtB,QAAI,QAAQ;AACV,aAAO,MAAM;AAAA;AAAA;AAAA,MAIb,OAAa;AACf,QAAI,IAAI,KAAK;AACb,WAAO,GAAG;AACR,UAAI,aAAa,MAAM;AACrB,eAAO;AAAA;AAET,UAAI,EAAE;AAAA;AAMR,WAAO,KAAK,KAAK;AAAA;AAAA,MAGf,OAAmB;AACrB,QAAI,IAAgB;AACpB,WAAO,EAAE,QAAQ;AACf,UAAI,EAAE;AAAA;AAER,WAAO;AAAA;AAAA,EAGT,MAA4B,OAAa;AACvC,UAAM,QAAQ,SAAS,OAAO;AAC9B,SAAK,SAAS,IAAI;AAClB,UAAM,SAAS;AACf,WAAO;AAAA;AAAA,EAGT,SAAS;AAEP,SAAK,QAAQ,SAAS,OAAO;AAC7B,SAAK,SAAS;AAAA;AAAA,EAIhB,YAAY,OAAmB;AAC7B,QAAI,CAAC,KAAK,SAAS,IAAI,QAAQ;AAC7B,YAAM,IAAI,MAAM;AAAA;AAElB,UAAM;AAAA;AAAA,EAQR,KAA2B,SAAmC;AAC5D,UAAM;AAAA,MACJ;AAAA,MACA;AAAA,MACA;AAAA,MACA,MAAM;AAAA,MACN,SAAS;AAAA,QACP;AACJ,QAAI,cAAc;AAClB,QAAI,MAAgB;AACpB,SAAK,QAAQ;AAAA,MACX;AAAA,MACA;AAAA,MACA;AAAA,MACA,GAAG,SAAS;AACV,YAAI,KAAK;AACP,gBAAM,OAAO,QAAQ,gBAAgB;AACrC,cAAI,SAAS,QAAQ,QAAQ,aAAa;AACxC,kBAAM;AACN,0BAAc;AAAA;AAAA,eAEX;AACL,cAAI,QAAQ,MAAM;AAChB,kBAAM;AAAA;AAAA;AAAA;AAAA;AAKd,WAAO;AAAA;AAAA,EAGT,QAA8B,SAAyB;AACrD,UAAM,MAAM;AACZ,SAAK,QAAQ;AAAA,SACR;AAAA,MACH,GAAG,SAAS;AACV,YAAI,KAAK;AAAA;AAAA;AAGb,WAAO;AAAA;AAAA,EAGT,QAA8B,SAA4B;AACxD,UAAM;AAAA,MACJ;AAAA,MACA;AAAA,MACA,YAAY;AAAA,MACZ,MAAM;AAAA,MACN,SAAS;AAAA,MACT,IAAI;AAAA,QACF;AAEJ,eAAW,WAAW,KAAK,UAAU;AACnC,UAAI,WAAW;AACb,gBAAQ,QAAQ;AAAA;AAGlB,YAAM,kBAAkB,KAAK;AAC7B,UAAI,CAAC,mBAAoB,QAAQ,CAAC,KAAK,kBAAmB;AACxD;AAAA;AAGF,UAAI,KAAK;AACP,cAAM,OAAO,gBAAgB,gBAAgB;AAC7C,YAAI,SAAS,QAAQ,QAAQ,QAAQ;AACnC;AAAA;AAAA;AAIJ,WAAK,KAAK,MAAM;AAAA;AAAA;AAAA,EAIpB,eAAe;AACb,eAAW,OAAO,OAAO,OAAO,OAAO;AACrC,UAAI,eAAe,YAAY;AAC7B,YAAI,aAAa;AAAA;AAAA;AAAA;AAAA;AAMlB,aAAM,cAAc,CAAC,YAAwB;AAE7C,aAAM,OAAO,IAAK,cAAc,WAAW;AAAA,EAAzB,cArKzB;AAqKyB;AACvB,uBAA2B;AAAA;AAAA,MAEvB,OAAO;AACT,WAAO,KAAK;AAAA;AAAA,EAGd,gBAAgB,OAAiB;AAC/B,WAAO;AAAA;AAAA,EAGT,OAAO,IAAY,GAAW;AAC5B,eAAW,SAAS,KAAK,UAAU;AACjC,YAAM,OAAO,IAAI;AAAA;AAAA;AAAA;AAKvB,aAAa,QAAQ;",
  "names": []
}
