{
  "version": 3,
  "sources": ["/Users/admin/Work/Inkling/InkbaseV2/src/app/ink/Handle.ts"],
  "sourcesContent": ["import { GameObject, root } from '../GameObject';\nimport SVG from '../Svg';\nimport * as constraints from '../constraints';\nimport { generateId } from '../../lib/helpers';\nimport { Position } from '../../lib/types';\nimport Vec from '../../lib/vec';\nimport { Constraint, Pin } from '../constraints';\nimport { TAU } from '../../lib/math';\n\nexport default class Handle extends GameObject {\n  static create(position: Position, getAbsorbed = true): Handle {\n    const handle = new Handle(position);\n    if (getAbsorbed) {\n      handle.getAbsorbedByNearestHandle();\n    }\n    return handle;\n  }\n\n  public readonly id = generateId();\n\n  private readonly backElm = SVG.add('g', SVG.handleElm, { class: 'handle' });\n  private readonly frontElm = SVG.add('g', SVG.constraintElm, {\n    class: 'handle',\n  });\n\n  public readonly xVariable = constraints.variable(0, {\n    object: this,\n    property: 'x',\n  });\n  public readonly yVariable = constraints.variable(0, {\n    object: this,\n    property: 'y',\n  });\n\n  private constructor(position: Position) {\n    super(root);\n    this.position = position;\n\n    SVG.add('circle', this.backElm, { r: 15 });\n    const arcs1 = SVG.add('g', this.frontElm, { class: 'arcs1' });\n    const arcs2 = SVG.add('g', this.frontElm, { class: 'arcs2' });\n    const arc = (angle = 0) => SVG.arcPath(Vec.zero, 14, angle, Math.PI / 10);\n    SVG.add('path', arcs1, { d: arc((0 * TAU) / 4) });\n    SVG.add('path', arcs1, { d: arc((1 * TAU) / 4) });\n    SVG.add('path', arcs1, { d: arc((2 * TAU) / 4) });\n    SVG.add('path', arcs1, { d: arc((3 * TAU) / 4) });\n    SVG.add('path', arcs2, { d: arc((0 * TAU) / 4) });\n    SVG.add('path', arcs2, { d: arc((1 * TAU) / 4) });\n    SVG.add('path', arcs2, { d: arc((2 * TAU) / 4) });\n    SVG.add('path', arcs2, { d: arc((3 * TAU) / 4) });\n  }\n\n  get x() {\n    return this.xVariable.value;\n  }\n\n  get y() {\n    return this.yVariable.value;\n  }\n\n  get position(): Position {\n    return this;\n  }\n\n  set position(pos: Position) {\n    ({ x: this.xVariable.value, y: this.yVariable.value } = pos);\n  }\n\n  remove() {\n    this.backElm.remove();\n    this.frontElm.remove();\n    if (!this.isCanonical) {\n      this.canonicalInstance.breakOff(this);\n    }\n    this.xVariable.remove();\n    this.yVariable.remove();\n    super.remove();\n  }\n\n  absorb(that: Handle) {\n    constraints.absorb(this, that);\n  }\n\n  getAbsorbedByNearestHandle() {\n    const nearestHandle = this.page.find({\n      what: aCanonicalHandle,\n      near: this.position,\n      that: handle => handle !== this,\n    });\n    if (nearestHandle) {\n      nearestHandle.absorb(this);\n    }\n  }\n\n  private _canonicalHandle: Handle = this;\n  readonly absorbedHandles = new Set<Handle>();\n\n  get isCanonical() {\n    return this._canonicalHandle === this;\n  }\n\n  get canonicalInstance() {\n    return this._canonicalHandle;\n  }\n\n  private set canonicalInstance(handle: Handle) {\n    this._canonicalHandle = handle;\n  }\n\n  /** This method should only be called by the constraint system. */\n  _absorb(that: Handle) {\n    if (that === this) {\n      return;\n    }\n\n    that.canonicalInstance.absorbedHandles.delete(that);\n    for (const handle of that.absorbedHandles) {\n      this._absorb(handle);\n    }\n    that.canonicalInstance = this;\n    this.absorbedHandles.add(that);\n  }\n\n  /** This method should only be called by the constraint system. */\n  _forgetAbsorbedHandles() {\n    this.canonicalInstance = this;\n    this.absorbedHandles.clear();\n  }\n\n  breakOff(handle: Handle) {\n    if (this.absorbedHandles.has(handle)) {\n      constraints.absorb(this, handle).remove();\n    } else if (handle === this) {\n      const absorbedHandles = [...this.absorbedHandles];\n      const newCanonicalHandle = absorbedHandles.shift()!;\n      constraints.absorb(this, newCanonicalHandle).remove();\n      for (const absorbedHandle of absorbedHandles) {\n        constraints.absorb(newCanonicalHandle, absorbedHandle);\n      }\n    } else {\n      throw new Error('tried to break off a handle that was not absorbed');\n    }\n    return handle;\n  }\n\n  get hasPin() {\n    for (const constraint of Constraint.all) {\n      if (\n        constraint instanceof Pin &&\n        constraint.handle.canonicalInstance === this.canonicalInstance\n      ) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  togglePin(doPin = !this.hasPin): void {\n    if (!this.isCanonical) {\n      return this.canonicalInstance.togglePin(doPin);\n    }\n\n    for (const h of [this, ...this.absorbedHandles]) {\n      if (doPin) {\n        constraints.pin(h);\n      } else {\n        constraints.pin(h).remove();\n      }\n    }\n  }\n\n  render(t: number, dt: number) {\n    const attrs = {\n      transform: SVG.positionToTransform(this),\n      'is-canonical': this.isCanonical,\n      'has-pin': this.hasPin,\n    };\n    SVG.update(this.backElm, attrs);\n    SVG.update(this.frontElm, attrs);\n\n    for (const child of this.children) {\n      child.render(dt, t);\n    }\n  }\n\n  distanceToPoint(point: Position) {\n    return Vec.dist(this.position, point);\n  }\n\n  equals(that: Handle) {\n    return (\n      this.xVariable.equals(that.xVariable) &&\n      this.yVariable.equals(that.yVariable)\n    );\n  }\n}\n\nexport const aHandle = (gameObj: GameObject) =>\n  gameObj instanceof Handle ? gameObj : null;\n\nexport const aCanonicalHandle = (gameObj: GameObject) =>\n  gameObj instanceof Handle && gameObj.isCanonical ? gameObj : null;\n"],
  "mappings": "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",
  "names": []
}
