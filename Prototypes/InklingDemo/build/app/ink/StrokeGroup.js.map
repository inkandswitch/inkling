{
  "version": 3,
  "sources": ["/Users/admin/Work/Inkling/InkbaseV2/src/app/ink/StrokeGroup.ts"],
  "sourcesContent": ["import Stroke, { aStroke } from './Stroke';\nimport Handle from './Handle';\n\nimport TransformationMatrix from '../../lib/TransformationMatrix';\nimport { Position } from '../../lib/types';\n\nimport { farthestPair } from '../../lib/helpers';\nimport { GameObject } from '../GameObject';\n\nexport default class StrokeGroup extends GameObject {\n  private pointData: Position[][];\n\n  // These strong references are OK b/c a and b will always be my children\n  readonly a: Handle;\n  readonly b: Handle;\n\n  constructor(strokes: Set<Stroke>) {\n    super();\n\n    for (const stroke of strokes) {\n      this.adopt(stroke);\n    }\n\n    // Generate Handles\n    const points = this.strokes.flatMap(stroke => stroke.points);\n    [this.a, this.b] = farthestPair(points).map(pos =>\n      this.adopt(Handle.create(pos))\n    );\n\n    this.pointData = this.generatePointData();\n  }\n\n  generatePointData() {\n    const transform = TransformationMatrix.fromLine(\n      this.a.position,\n      this.b.position\n    ).inverse();\n    this.pointData = this.strokes.map(stroke =>\n      stroke.points.map(p => transform.transformPoint(p))\n    );\n    return this.pointData;\n  }\n\n  get strokes(): Stroke[] {\n    return this.findAll({ what: aStroke, recursive: false });\n  }\n\n  private updatePaths() {\n    const transform = TransformationMatrix.fromLine(\n      this.a.position,\n      this.b.position\n    );\n\n    for (const [i, stroke] of this.strokes.entries()) {\n      const newPoints = this.pointData[i].map(p => transform.transformPoint(p));\n      stroke.updatePath(newPoints);\n    }\n  }\n\n  distanceToPoint(pos: Position) {\n    let minDistance: number | null = null;\n    for (const stroke of this.strokes) {\n      const dist = stroke.distanceToPoint(pos);\n      if (dist === null) {\n        continue;\n      } else if (minDistance === null) {\n        minDistance = dist;\n      } else {\n        minDistance = Math.min(minDistance, dist);\n      }\n    }\n    return minDistance;\n  }\n\n  render(dt: number, t: number) {\n    // TODO: Ivan to speed this up if necessary\n    this.updatePaths();\n\n    for (const child of this.children) {\n      child.render(dt, t);\n    }\n  }\n\n  breakApart() {\n    if (!this.parent) {\n      throw new Error(\"You can't break apart a parent-less StrokeGroup\");\n    }\n    let stroke: Stroke | undefined;\n    while ((stroke = this.strokes.pop())) {\n      this.parent.adopt(stroke);\n    }\n    this.remove();\n  }\n\n  remove() {\n    this.a.remove();\n    this.b.remove();\n    for (const s of this.strokes) {\n      s.remove();\n    }\n    super.remove();\n  }\n}\n\nexport const aStrokeGroup = (gameObj: GameObject) =>\n  gameObj instanceof StrokeGroup ? gameObj : null;\n"],
  "mappings": "AAAA;AACA;AAEA;AAGA;AACA;AAEA,yCAAyC,WAAW;AAAA,EAOlD,YAAY,SAAsB;AAChC;AAEA,eAAW,UAAU,SAAS;AAC5B,WAAK,MAAM;AAAA;AAIb,UAAM,SAAS,KAAK,QAAQ,QAAQ,YAAU,OAAO;AACrD,KAAC,KAAK,GAAG,KAAK,KAAK,aAAa,QAAQ,IAAI,SAC1C,KAAK,MAAM,OAAO,OAAO;AAG3B,SAAK,YAAY,KAAK;AAAA;AAAA,EAGxB,oBAAoB;AAClB,UAAM,YAAY,qBAAqB,SACrC,KAAK,EAAE,UACP,KAAK,EAAE,UACP;AACF,SAAK,YAAY,KAAK,QAAQ,IAAI,YAChC,OAAO,OAAO,IAAI,OAAK,UAAU,eAAe;AAElD,WAAO,KAAK;AAAA;AAAA,MAGV,UAAoB;AACtB,WAAO,KAAK,QAAQ,CAAE,MAAM,SAAS,WAAW;AAAA;AAAA,EAG1C,cAAc;AACpB,UAAM,YAAY,qBAAqB,SACrC,KAAK,EAAE,UACP,KAAK,EAAE;AAGT,eAAW,CAAC,GAAG,WAAW,KAAK,QAAQ,WAAW;AAChD,YAAM,YAAY,KAAK,UAAU,GAAG,IAAI,OAAK,UAAU,eAAe;AACtE,aAAO,WAAW;AAAA;AAAA;AAAA,EAItB,gBAAgB,KAAe;AAC7B,QAAI,cAA6B;AACjC,eAAW,UAAU,KAAK,SAAS;AACjC,YAAM,OAAO,OAAO,gBAAgB;AACpC,UAAI,SAAS,MAAM;AACjB;AAAA,iBACS,gBAAgB,MAAM;AAC/B,sBAAc;AAAA,aACT;AACL,sBAAc,KAAK,IAAI,aAAa;AAAA;AAAA;AAGxC,WAAO;AAAA;AAAA,EAGT,OAAO,IAAY,GAAW;AAE5B,SAAK;AAEL,eAAW,SAAS,KAAK,UAAU;AACjC,YAAM,OAAO,IAAI;AAAA;AAAA;AAAA,EAIrB,aAAa;AACX,QAAI,CAAC,KAAK,QAAQ;AAChB,YAAM,IAAI,MAAM;AAAA;AAElB,QAAI;AACJ,WAAQ,SAAS,KAAK,QAAQ,OAAQ;AACpC,WAAK,OAAO,MAAM;AAAA;AAEpB,SAAK;AAAA;AAAA,EAGP,SAAS;AACP,SAAK,EAAE;AACP,SAAK,EAAE;AACP,eAAW,KAAK,KAAK,SAAS;AAC5B,QAAE;AAAA;AAEJ,UAAM;AAAA;AAAA;AAIH,aAAM,eAAe,CAAC,YAC3B,mBAAmB,cAAc,UAAU;",
  "names": []
}
