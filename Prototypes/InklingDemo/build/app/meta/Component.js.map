{
  "version": 3,
  "sources": ["/Users/admin/Work/Inkling/InkbaseV2/src/app/meta/Component.ts"],
  "sourcesContent": ["import { closestPointOnPolygon } from '../../lib/polygon';\nimport { Position } from '../../lib/types';\nimport { GameObject } from '../GameObject';\nimport SVG from '../Svg';\nimport { aStroke } from '../ink/Stroke';\nimport { MetaStruct } from './MetaSemantics';\nimport Token from './Token';\nimport { WirePort } from './Wire';\nimport ClipperShape from '@doodle3d/clipper-js';\n\nexport default class Component extends GameObject {\n  editing = false;\n\n  position: Position = { x: 400, y: 100 };\n  width = 100;\n  height = 100;\n\n  readonly scope = new MetaStruct([]);\n\n  private outline: Array<Position> = [];\n  private clipperShape: ClipperShape = new ClipperShape([]);\n\n  readonly wirePorts: Array<WirePort> = [];\n\n  protected readonly svgOutline = SVG.add('path', SVG.metaElm, {\n    class: 'component',\n  });\n\n  getWirePortNear(pos: Position): WirePort {\n    const closestPoint = closestPointOnPolygon(this.outline, pos);\n\n    const newPort = new WirePort(closestPoint, this.scope);\n    this.wirePorts.push(newPort);\n    return newPort;\n  }\n\n  render(dt: number, t: number): void {\n    SVG.update(this.svgOutline, {\n      d: SVG.path(this.outline),\n    });\n\n    for (const child of this.children) {\n      if (child instanceof Token) {\n        child.hidden = !this.editing;\n      }\n      child.render(dt, t);\n    }\n  }\n\n  distanceToPoint(pos: Position) {\n    if (this.clipperShape.pointInShape(pos, true)) {\n      return 0;\n    } else {\n      return Infinity;\n    }\n  }\n\n  updateOutline() {\n    const strokes = this.findAll({ what: aStroke });\n    this.clipperShape = new ClipperShape(\n      strokes.map(stroke => stroke.points),\n      true,\n      true,\n      true,\n      true\n    );\n    this.clipperShape = this.clipperShape.offset(7, {\n      jointType: 'jtRound',\n      endType: 'etOpenRound',\n      miterLimit: 2.0,\n      roundPrecision: 0.1,\n    });\n    const shapePaths = this.clipperShape.paths.map(path => {\n      const p = path.map(pt => {\n        return { x: pt.X, y: pt.Y };\n      });\n      return p.concat([p[0]]);\n    });\n    this.outline = shapePaths[0];\n  }\n}\n\nexport const aComponent = (gameObj: GameObject) =>\n  gameObj instanceof Component ? gameObj : null;\n"],
  "mappings": "AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,uCAAuC,WAAW;AAAA,EAAlD,cAVA;AAUA;AACE,mBAAU;AAEV,oBAAqB,CAAE,GAAG,KAAK,GAAG;AAClC,iBAAQ;AACR,kBAAS;AAEA,iBAAQ,IAAI,WAAW;AAExB,mBAA2B;AAC3B,wBAA6B,IAAI,aAAa;AAE7C,qBAA6B;AAEnB,sBAAa,IAAI,IAAI,QAAQ,IAAI,SAAS;AAAA,MAC3D,OAAO;AAAA;AAAA;AAAA,EAGT,gBAAgB,KAAyB;AACvC,UAAM,eAAe,sBAAsB,KAAK,SAAS;AAEzD,UAAM,UAAU,IAAI,SAAS,cAAc,KAAK;AAChD,SAAK,UAAU,KAAK;AACpB,WAAO;AAAA;AAAA,EAGT,OAAO,IAAY,GAAiB;AAClC,QAAI,OAAO,KAAK,YAAY;AAAA,MAC1B,GAAG,IAAI,KAAK,KAAK;AAAA;AAGnB,eAAW,SAAS,KAAK,UAAU;AACjC,UAAI,iBAAiB,OAAO;AAC1B,cAAM,SAAS,CAAC,KAAK;AAAA;AAEvB,YAAM,OAAO,IAAI;AAAA;AAAA;AAAA,EAIrB,gBAAgB,KAAe;AAC7B,QAAI,KAAK,aAAa,aAAa,KAAK,OAAO;AAC7C,aAAO;AAAA,WACF;AACL,aAAO;AAAA;AAAA;AAAA,EAIX,gBAAgB;AACd,UAAM,UAAU,KAAK,QAAQ,CAAE,MAAM;AACrC,SAAK,eAAe,IAAI,aACtB,QAAQ,IAAI,YAAU,OAAO,SAC7B,MACA,MACA,MACA;AAEF,SAAK,eAAe,KAAK,aAAa,OAAO,GAAG;AAAA,MAC9C,WAAW;AAAA,MACX,SAAS;AAAA,MACT,YAAY;AAAA,MACZ,gBAAgB;AAAA;AAElB,UAAM,aAAa,KAAK,aAAa,MAAM,IAAI,UAAQ;AACrD,YAAM,IAAI,KAAK,IAAI,QAAM;AACvB,eAAO,CAAE,GAAG,GAAG,GAAG,GAAG,GAAG;AAAA;AAE1B,aAAO,EAAE,OAAO,CAAC,EAAE;AAAA;AAErB,SAAK,UAAU,WAAW;AAAA;AAAA;AAIvB,aAAM,aAAa,CAAC,YACzB,mBAAmB,YAAY,UAAU;",
  "names": []
}
