{
  "version": 3,
  "sources": ["/Users/admin/Work/Inkling/InkbaseV2/src/app/meta/NumberToken.ts"],
  "sourcesContent": ["import Token from './Token';\nimport { WirePort } from './Wire';\nimport { MetaNumber } from './MetaSemantics';\nimport SVG from '../Svg';\nimport { Variable } from '../constraints';\nimport * as constraints from '../constraints';\nimport * as ohm from 'ohm-js';\nimport { GameObject } from '../GameObject';\nimport { generateId } from '../../lib/helpers';\n// import VarMover from '../VarMover';\n\nexport default class NumberToken extends Token {\n  readonly id = generateId();\n\n  private lastRenderedValue = '';\n  private lastRenderedEditing = false;\n  editValue = '';\n\n  // Rendering stuff\n  protected readonly elm = SVG.add('g', SVG.metaElm, { class: 'number-token' });\n\n  protected readonly boxElm = SVG.add('rect', this.elm, {\n    class: 'token-box',\n    height: this.height,\n  });\n\n  protected readonly wholeElm = SVG.add('text', this.elm, {\n    class: 'token-text',\n  });\n\n  protected readonly fracElm = SVG.add('text', this.elm, {\n    class: 'token-frac-text',\n  });\n\n  protected digitElems: Array<SVGElement> = [];\n\n  // Meta stuff things\n  readonly variable: Variable;\n  wirePort: WirePort;\n\n  constructor(value?: number, source?: ohm.Interval);\n  constructor(variable: Variable, source?: ohm.Interval);\n  constructor(arg: number | Variable = 0, source?: ohm.Interval) {\n    super(source);\n    if (arg instanceof Variable) {\n      this.variable = arg;\n    } else {\n      this.variable = constraints.variable(arg, {\n        object: this,\n        property: 'number-token-value',\n      });\n    }\n    this.wirePort = this.adopt(\n      new WirePort(this.position, new MetaNumber(this.variable))\n    );\n  }\n\n  isPrimary() {\n    return true;\n  }\n\n  addChar(char: string) {\n    this.editValue += char;\n  }\n\n  updateCharAt(index: number, char: string) {\n    const array = this.editValue.split('');\n    array.splice(index, 1, char);\n    this.editValue = array.join('');\n  }\n\n  refreshEditValue() {\n    this.editValue = this.variable.value.toFixed(0);\n  }\n\n  refreshValue() {\n    let value = parseFloat(this.editValue);\n    if (Number.isNaN(value)) {\n      value = 0;\n    }\n    // VarMover.move(this.variable, value, 0.2);\n    this.variable.value = value;\n  }\n\n  render(dt: number, t: number): void {\n    SVG.update(this.elm, {\n      transform: SVG.positionToTransform(this.position),\n      'is-locked': this.getVariable().isLocked,\n      'is-embedded': this.embedded,\n      'is-editing': this.editing,\n    });\n\n    this.wirePort.position = this.midPoint();\n\n    // getComputedTextLength() is slow, so we're gonna do some dirty checking here\n    const newValue = this.editing\n      ? this.editValue\n      : this.variable.value.toFixed(2);\n\n    if (\n      newValue === this.lastRenderedValue &&\n      this.lastRenderedEditing === this.editing\n    ) {\n      return;\n    }\n\n    this.lastRenderedEditing = this.editing;\n    this.lastRenderedValue = newValue;\n\n    // Cleanup digitElems\n    for (const elem of this.digitElems) {\n      elem.remove();\n    }\n    this.digitElems = [];\n\n    // Render edit mode\n    if (this.editing) {\n      const chars = this.editValue.split('');\n\n      // Update visuals\n      for (const [i, char] of chars.entries()) {\n        this.digitElems.push(\n          SVG.add('text', this.elm, {\n            class: 'token-text',\n            content: char,\n            style: `translate: ${5 + i * 27}px 24px;`,\n          })\n        );\n      }\n      this.width = chars.length * 27 - 3;\n      SVG.update(this.boxElm, { width: this.width });\n      SVG.update(this.wholeElm, { visibility: 'hidden' });\n      SVG.update(this.fracElm, { visibility: 'hidden' });\n    } else {\n      this.lastRenderedValue = newValue;\n\n      const [whole, frac] = newValue.split('.');\n\n      SVG.update(this.wholeElm, { content: whole, visibility: 'visible' });\n      SVG.update(this.fracElm, { content: frac, visibility: 'visible' });\n\n      const wholeWidth = this.wholeElm.getComputedTextLength();\n      const fracWidth = this.fracElm.getComputedTextLength();\n\n      this.width = 5 + wholeWidth + 2 + fracWidth + 5;\n\n      SVG.update(this.boxElm, { width: this.width });\n      SVG.update(this.fracElm, { dx: wholeWidth + 2 });\n    }\n\n    for (const child of this.children) {\n      child.render(dt, t);\n    }\n  }\n\n  getVariable() {\n    return this.variable;\n  }\n\n  onTap() {\n    this.getVariable().toggleLock();\n  }\n\n  remove() {\n    this.elm.remove();\n    super.remove();\n  }\n}\n\nexport const aNumberToken = (gameObj: GameObject) =>\n  gameObj instanceof NumberToken ? gameObj : null;\n"],
  "mappings": "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",
  "names": []
}
