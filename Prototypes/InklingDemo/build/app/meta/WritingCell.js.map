{
  "version": 3,
  "sources": ["/Users/admin/Work/Inkling/InkbaseV2/src/app/meta/WritingCell.ts"],
  "sourcesContent": ["import { GameObject } from '../GameObject';\nimport { Position } from '../../lib/types';\nimport SVG from '../Svg';\nimport Stroke, { aStroke } from '../ink/Stroke';\nimport WritingRecognizer from '../recognizers/WritingRecognizer';\nimport { signedDistanceToBox } from '../../lib/SignedDistance';\n\nconst writingRecognizer = new WritingRecognizer();\n\nexport default class WritingCell extends GameObject {\n  width = 24;\n  height = 30;\n  position: Position = { x: 100, y: 100 };\n  timer: number | null = null;\n\n  stringValue = '';\n\n  protected readonly svgCell = SVG.add('rect', SVG.metaElm, {\n    x: this.position.x,\n    y: this.position.y,\n    width: this.width,\n    height: this.height,\n    rx: 3,\n    class: 'formula-editor-cell',\n  });\n\n  render(dt: number, t: number): void {\n    // Update timer\n    if (this.timer) {\n      this.timer -= dt;\n      if (this.timer < 0) {\n        this.recognizeStrokes();\n        this.timer = null;\n      }\n    }\n\n    SVG.update(this.svgCell, {\n      x: this.position.x,\n      y: this.position.y,\n      width: this.width,\n    });\n  }\n\n  captureStroke(stroke: Stroke) {\n    this.adopt(stroke);\n    this.timer = 0.5;\n  }\n\n  private recognizeStrokes() {\n    const strokes = this.findAll({ what: aStroke }).map(s => s.points);\n    if (strokes.length === 0) {\n      return;\n    }\n\n    const result = writingRecognizer.recognize(strokes);\n    this.stringValue = result.Name;\n\n    // Remember stroke data if we want to add it to the library\n    // this.strokeData = strokes;\n\n    // Clean up strokes that have been recognized\n    this.children.forEach(child => {\n      child.remove();\n    });\n  }\n\n  distanceToPoint(point: Position) {\n    return signedDistanceToBox(\n      this.position.x,\n      this.position.y,\n      this.width,\n      this.height,\n      point.x,\n      point.y\n    );\n  }\n\n  remove() {\n    this.svgCell.remove();\n\n    for (const child of this.children) {\n      child.remove();\n    }\n\n    super.remove();\n  }\n}\n\nexport const aWritingCell = (gameObj: GameObject) =>\n  gameObj instanceof WritingCell ? gameObj : null;\n"],
  "mappings": "AAAA;AAEA;AACA;AACA;AACA;AAEA,MAAM,oBAAoB,IAAI;AAE9B,yCAAyC,WAAW;AAAA,EAApD,cATA;AASA;AACE,iBAAQ;AACR,kBAAS;AACT,oBAAqB,CAAE,GAAG,KAAK,GAAG;AAClC,iBAAuB;AAEvB,uBAAc;AAEK,mBAAU,IAAI,IAAI,QAAQ,IAAI,SAAS;AAAA,MACxD,GAAG,KAAK,SAAS;AAAA,MACjB,GAAG,KAAK,SAAS;AAAA,MACjB,OAAO,KAAK;AAAA,MACZ,QAAQ,KAAK;AAAA,MACb,IAAI;AAAA,MACJ,OAAO;AAAA;AAAA;AAAA,EAGT,OAAO,IAAY,GAAiB;AAElC,QAAI,KAAK,OAAO;AACd,WAAK,SAAS;AACd,UAAI,KAAK,QAAQ,GAAG;AAClB,aAAK;AACL,aAAK,QAAQ;AAAA;AAAA;AAIjB,QAAI,OAAO,KAAK,SAAS;AAAA,MACvB,GAAG,KAAK,SAAS;AAAA,MACjB,GAAG,KAAK,SAAS;AAAA,MACjB,OAAO,KAAK;AAAA;AAAA;AAAA,EAIhB,cAAc,QAAgB;AAC5B,SAAK,MAAM;AACX,SAAK,QAAQ;AAAA;AAAA,EAGP,mBAAmB;AACzB,UAAM,UAAU,KAAK,QAAQ,CAAE,MAAM,UAAW,IAAI,OAAK,EAAE;AAC3D,QAAI,QAAQ,WAAW,GAAG;AACxB;AAAA;AAGF,UAAM,SAAS,kBAAkB,UAAU;AAC3C,SAAK,cAAc,OAAO;AAM1B,SAAK,SAAS,QAAQ,WAAS;AAC7B,YAAM;AAAA;AAAA;AAAA,EAIV,gBAAgB,OAAiB;AAC/B,WAAO,oBACL,KAAK,SAAS,GACd,KAAK,SAAS,GACd,KAAK,OACL,KAAK,QACL,MAAM,GACN,MAAM;AAAA;AAAA,EAIV,SAAS;AACP,SAAK,QAAQ;AAEb,eAAW,SAAS,KAAK,UAAU;AACjC,YAAM;AAAA;AAGR,UAAM;AAAA;AAAA;AAIH,aAAM,eAAe,CAAC,YAC3B,mBAAmB,cAAc,UAAU;",
  "names": []
}
