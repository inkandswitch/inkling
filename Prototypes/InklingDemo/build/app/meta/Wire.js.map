{
  "version": 3,
  "sources": ["/Users/admin/Work/Inkling/InkbaseV2/src/app/meta/Wire.ts"],
  "sourcesContent": ["import { GameObject } from '../GameObject';\nimport SVG from '../Svg';\nimport { Position } from '../../lib/types';\nimport Vec from '../../lib/vec';\nimport { MetaConnection, MetaValue } from './MetaSemantics';\nimport { distanceToPath } from '../../lib/helpers';\nimport Svg from '../Svg';\n\n// TODO: maybe this shouldn't be a GameObject\nexport class WirePort extends GameObject {\n  position: Position;\n  value: MetaValue;\n\n  constructor(position: Position, value: MetaValue) {\n    super();\n    this.position = position;\n    this.value = value;\n  }\n\n  distanceToPoint(point: Position) {\n    return null;\n  }\n\n  render(dt: number, t: number): void {}\n}\n\nexport default class Wire extends GameObject {\n  points: Position[] = [];\n  a?: WeakRef<WirePort>;\n  b?: WeakRef<WirePort>;\n  connection: MetaConnection | null = null;\n\n  protected readonly elm = SVG.add('polyline', SVG.wiresElm, {\n    points: '',\n    class: 'wire',\n  });\n\n  distanceToPoint(point: Position) {\n    return distanceToPath(point, this.points);\n  }\n\n  togglePaused(isPaused = !this.connection?.paused) {\n    return this.connection?.togglePaused(isPaused);\n  }\n\n  render(): void {\n    const a = this.a?.deref();\n    const b = this.b?.deref();\n\n    if (a) {\n      this.points[0] = a.position;\n    }\n\n    if (b) {\n      this.points[1] = b.position;\n    }\n\n    SVG.update(this.elm, {\n      points: SVG.points(this.points),\n      'is-paused': this.connection?.paused,\n    });\n  }\n\n  isCollapsable() {\n    const [p1, p2] = this.points;\n    return p1 && p2 && Vec.dist(p1, p2) < 10;\n  }\n\n  attachFront(element: WirePort) {\n    this.a = new WeakRef(element);\n    this.updateConstraint();\n  }\n\n  attachEnd(element: WirePort) {\n    this.b = new WeakRef(element);\n    this.updateConstraint();\n  }\n\n  private updateConstraint() {\n    const a = this.a?.deref();\n    const b = this.b?.deref();\n    if (a && b) {\n      this.connection = a.value.wireTo(b.value);\n      if (this.connection === null) {\n        // Remove the wire if it's not a valid connection\n        Svg.showStatus(\"You can't wire those things together silly billy\");\n        this.remove();\n      }\n    }\n  }\n\n  remove(): void {\n    this.elm.remove();\n    this.connection?.remove();\n    super.remove();\n  }\n}\n\nexport const aWire = (g: GameObject) => (g instanceof Wire ? g : null);\n"],
  "mappings": "AAAA;AACA;AAEA;AAEA;AACA;AAGO,8BAAuB,WAAW;AAAA,EAIvC,YAAY,UAAoB,OAAkB;AAChD;AACA,SAAK,WAAW;AAChB,SAAK,QAAQ;AAAA;AAAA,EAGf,gBAAgB,OAAiB;AAC/B,WAAO;AAAA;AAAA,EAGT,OAAO,IAAY,GAAiB;AAAA;AAAA;AAGtC,kCAAkC,WAAW;AAAA,EAA7C,cA1BA;AA0BA;AACE,kBAAqB;AAGrB,sBAAoC;AAEjB,eAAM,IAAI,IAAI,YAAY,IAAI,UAAU;AAAA,MACzD,QAAQ;AAAA,MACR,OAAO;AAAA;AAAA;AAAA,EAGT,gBAAgB,OAAiB;AAC/B,WAAO,eAAe,OAAO,KAAK;AAAA;AAAA,EAGpC,aAAa,WAAW,CAAC,KAAK,YAAY,QAAQ;AAChD,WAAO,KAAK,YAAY,aAAa;AAAA;AAAA,EAGvC,SAAe;AACb,UAAM,IAAI,KAAK,GAAG;AAClB,UAAM,IAAI,KAAK,GAAG;AAElB,QAAI,GAAG;AACL,WAAK,OAAO,KAAK,EAAE;AAAA;AAGrB,QAAI,GAAG;AACL,WAAK,OAAO,KAAK,EAAE;AAAA;AAGrB,QAAI,OAAO,KAAK,KAAK;AAAA,MACnB,QAAQ,IAAI,OAAO,KAAK;AAAA,MACxB,aAAa,KAAK,YAAY;AAAA;AAAA;AAAA,EAIlC,gBAAgB;AACd,UAAM,CAAC,IAAI,MAAM,KAAK;AACtB,WAAO,MAAM,MAAM,IAAI,KAAK,IAAI,MAAM;AAAA;AAAA,EAGxC,YAAY,SAAmB;AAC7B,SAAK,IAAI,IAAI,QAAQ;AACrB,SAAK;AAAA;AAAA,EAGP,UAAU,SAAmB;AAC3B,SAAK,IAAI,IAAI,QAAQ;AACrB,SAAK;AAAA;AAAA,EAGC,mBAAmB;AACzB,UAAM,IAAI,KAAK,GAAG;AAClB,UAAM,IAAI,KAAK,GAAG;AAClB,QAAI,KAAK,GAAG;AACV,WAAK,aAAa,EAAE,MAAM,OAAO,EAAE;AACnC,UAAI,KAAK,eAAe,MAAM;AAE5B,YAAI,WAAW;AACf,aAAK;AAAA;AAAA;AAAA;AAAA,EAKX,SAAe;AACb,SAAK,IAAI;AACT,SAAK,YAAY;AACjB,UAAM;AAAA;AAAA;AAIH,aAAM,QAAQ,CAAC,MAAmB,aAAa,OAAO,IAAI;",
  "names": []
}
