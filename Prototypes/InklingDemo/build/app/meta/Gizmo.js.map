{
  "version": 3,
  "sources": ["/Users/admin/Work/Inkling/InkbaseV2/src/app/meta/Gizmo.ts"],
  "sourcesContent": ["import { TAU, lerp } from '../../lib/math';\nimport SVG from '../Svg';\nimport Handle from '../ink/Handle';\nimport Vec from '../../lib/vec';\nimport { Position } from '../../lib/types';\nimport * as constraints from '../constraints';\nimport { Variable } from '../constraints';\nimport Line from '../../lib/line';\nimport { GameObject } from '../GameObject';\nimport { WirePort } from './Wire';\nimport { MetaLabel, MetaStruct } from './MetaSemantics';\n\nconst arc = SVG.arcPath(Vec.zero, 10, TAU / 4, Math.PI / 3);\n\nexport default class Gizmo extends GameObject {\n  center: Position;\n\n  private elm = SVG.add('g', SVG.gizmoElm, { class: 'gizmo' });\n  private thick = SVG.add('polyline', this.elm, { class: 'thick' });\n  private arrow = SVG.add('polyline', this.elm, { class: 'arrow' });\n  private arcs = SVG.add('g', this.elm, { class: 'arcs' });\n  private arc1 = SVG.add('path', this.arcs, { d: arc, class: 'arc1' });\n  private arc2 = SVG.add('path', this.arcs, { d: arc, class: 'arc2' });\n\n  readonly distance: Variable;\n  readonly angleInRadians: Variable;\n  readonly angleInDegrees: Variable;\n  private readonly _a: WeakRef<Handle>;\n  private readonly _b: WeakRef<Handle>;\n\n  readonly wirePort: WirePort;\n\n  get a(): Handle | undefined {\n    return this._a.deref();\n  }\n\n  get b(): Handle | undefined {\n    return this._b.deref();\n  }\n\n  get handles() {\n    const a = this.a;\n    const b = this.b;\n    return a && b ? { a, b } : null;\n  }\n\n  constructor(a: Handle, b: Handle) {\n    super();\n    this._a = new WeakRef(a);\n    this._b = new WeakRef(b);\n    this.center = this.updateCenter();\n    ({ distance: this.distance, angle: this.angleInRadians } =\n      constraints.polarVector(a, b));\n    this.angleInDegrees = constraints.linearRelationship(\n      constraints.variable((this.angleInRadians.value * 180) / Math.PI),\n      180 / Math.PI,\n      this.angleInRadians,\n      0\n    ).y;\n\n    this.distance.represents = {\n      object: this,\n      property: 'distance',\n    };\n    this.angleInRadians.represents = {\n      object: this,\n      property: 'angle-radians',\n    };\n    this.angleInDegrees.represents = {\n      object: this,\n      property: 'angle-degrees',\n    };\n\n    this.wirePort = this.adopt(\n      new WirePort(\n        this.center,\n        new MetaStruct([\n          new MetaLabel('distance', this.distance),\n          new MetaLabel('angle', this.angleInDegrees),\n        ])\n      )\n    );\n  }\n\n  updateCenter() {\n    const handles = this.handles;\n    if (!handles) {\n      return this.center;\n    }\n\n    return (this.center = Vec.avg(handles.a.position, handles.b.position));\n  }\n\n  midPoint() {\n    return this.center;\n  }\n\n  cycleConstraints() {\n    const aLock = this.angleInRadians.isLocked;\n    const dLock = this.distance.isLocked;\n\n    // There's probably some smarter way to do this with a bitmask or something\n    // but this is just a temporary hack so don't bother\n    if (!aLock && !dLock) {\n      this.toggleDistance();\n    } else if (dLock && !aLock) {\n      this.toggleAngle();\n    } else if (dLock && aLock) {\n      this.toggleDistance();\n    } else if (!dLock && aLock) {\n      this.toggleAngle();\n    }\n  }\n\n  toggleDistance() {\n    this.distance.toggleLock();\n  }\n\n  toggleAngle() {\n    // doesn't matter which angle we lock, one is absorbed by the other\n    // so they this results in locking/unlocking both\n    this.angleInRadians.toggleLock();\n  }\n\n  render() {\n    this.updateCenter();\n\n    this.wirePort.position = this.center;\n\n    const handles = this.handles;\n    if (!handles) {\n      return;\n    }\n\n    const a = handles.a.position;\n    const b = handles.b.position;\n    const len = Vec.dist(a, b);\n\n    const angle = this.angleInDegrees.value;\n    const aLock = this.angleInRadians.isLocked;\n    const dLock = this.distance.isLocked;\n    const fade = lerp(len, 80, 100, 0, 1);\n\n    SVG.update(this.elm, { 'is-constrained': aLock || dLock });\n    SVG.update(this.thick, { points: SVG.points(a, b) });\n\n    if (len > 0) {\n      const ab = Vec.sub(b, a);\n      const arrow = Vec.renormalize(ab, 4);\n      const tail = Vec.sub(this.center, Vec.renormalize(ab, 30));\n      const tip = Vec.add(this.center, Vec.renormalize(ab, 30));\n      const port = Vec.sub(tip, Vec.rotate(arrow, TAU / 12));\n      const starboard = Vec.sub(tip, Vec.rotate(arrow, -TAU / 12));\n\n      SVG.update(this.arrow, {\n        points: SVG.points(tail, tip, port, starboard, tip),\n        style: `opacity: ${fade}`,\n      });\n\n      SVG.update(this.arcs, {\n        style: `\n        opacity: ${fade};\n        transform:\n          translate(${this.center.x}px, ${this.center.y}px)\n          rotate(${angle}deg)\n        `,\n      });\n\n      const xOffset = aLock ? 0 : dLock ? 9.4 : 12;\n      const yOffset = dLock ? -3.5 : 0;\n      const arcTransform = `transform: translate(${xOffset}px, ${yOffset}px)`;\n      SVG.update(this.arc1, { style: arcTransform });\n      SVG.update(this.arc2, { style: arcTransform });\n    }\n  }\n\n  distanceToPoint(point: Position) {\n    if (!this.handles) {\n      return Infinity;\n    }\n    const line = Line(this.handles.a.position, this.handles.b.position);\n    const l = Line.distToPoint(line, point);\n    const a = Vec.dist(this.center, point);\n    return Math.min(l, a);\n  }\n\n  centerDistanceToPoint(p: Position) {\n    return Vec.dist(this.midPoint(), p);\n  }\n\n  remove() {\n    this.elm.remove();\n    this.a?.remove();\n    this.b?.remove();\n    super.remove();\n  }\n}\n\nexport const aGizmo = (gameObj: GameObject) =>\n  gameObj instanceof Gizmo ? gameObj : null;\n"],
  "mappings": "AAAA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA,MAAM,MAAM,IAAI,QAAQ,IAAI,MAAM,IAAI,MAAM,GAAG,KAAK,KAAK;AAEzD,mCAAmC,WAAW;AAAA,EAgC5C,YAAY,GAAW,GAAW;AAChC;AA9BM,eAAM,IAAI,IAAI,KAAK,IAAI,UAAU,CAAE,OAAO;AAC1C,iBAAQ,IAAI,IAAI,YAAY,KAAK,KAAK,CAAE,OAAO;AAC/C,iBAAQ,IAAI,IAAI,YAAY,KAAK,KAAK,CAAE,OAAO;AAC/C,gBAAO,IAAI,IAAI,KAAK,KAAK,KAAK,CAAE,OAAO;AACvC,gBAAO,IAAI,IAAI,QAAQ,KAAK,MAAM,CAAE,GAAG,KAAK,OAAO;AACnD,gBAAO,IAAI,IAAI,QAAQ,KAAK,MAAM,CAAE,GAAG,KAAK,OAAO;AA0BzD,SAAK,KAAK,IAAI,QAAQ;AACtB,SAAK,KAAK,IAAI,QAAQ;AACtB,SAAK,SAAS,KAAK;AACnB,IAAC,EAAE,UAAU,KAAK,UAAU,OAAO,KAAK,kBACtC,YAAY,YAAY,GAAG;AAC7B,SAAK,iBAAiB,YAAY,mBAChC,YAAY,SAAU,KAAK,eAAe,QAAQ,MAAO,KAAK,KAC9D,MAAM,KAAK,IACX,KAAK,gBACL,GACA;AAEF,SAAK,SAAS,aAAa;AAAA,MACzB,QAAQ;AAAA,MACR,UAAU;AAAA;AAEZ,SAAK,eAAe,aAAa;AAAA,MAC/B,QAAQ;AAAA,MACR,UAAU;AAAA;AAEZ,SAAK,eAAe,aAAa;AAAA,MAC/B,QAAQ;AAAA,MACR,UAAU;AAAA;AAGZ,SAAK,WAAW,KAAK,MACnB,IAAI,SACF,KAAK,QACL,IAAI,WAAW;AAAA,MACb,IAAI,UAAU,YAAY,KAAK;AAAA,MAC/B,IAAI,UAAU,SAAS,KAAK;AAAA;AAAA;AAAA,MA9ChC,IAAwB;AAC1B,WAAO,KAAK,GAAG;AAAA;AAAA,MAGb,IAAwB;AAC1B,WAAO,KAAK,GAAG;AAAA;AAAA,MAGb,UAAU;AACZ,UAAM,IAAI,KAAK;AACf,UAAM,IAAI,KAAK;AACf,WAAO,KAAK,IAAI,CAAE,GAAG,KAAM;AAAA;AAAA,EAyC7B,eAAe;AACb,UAAM,UAAU,KAAK;AACrB,QAAI,CAAC,SAAS;AACZ,aAAO,KAAK;AAAA;AAGd,WAAQ,KAAK,SAAS,IAAI,IAAI,QAAQ,EAAE,UAAU,QAAQ,EAAE;AAAA;AAAA,EAG9D,WAAW;AACT,WAAO,KAAK;AAAA;AAAA,EAGd,mBAAmB;AACjB,UAAM,QAAQ,KAAK,eAAe;AAClC,UAAM,QAAQ,KAAK,SAAS;AAI5B,QAAI,CAAC,SAAS,CAAC,OAAO;AACpB,WAAK;AAAA,eACI,SAAS,CAAC,OAAO;AAC1B,WAAK;AAAA,eACI,SAAS,OAAO;AACzB,WAAK;AAAA,eACI,CAAC,SAAS,OAAO;AAC1B,WAAK;AAAA;AAAA;AAAA,EAIT,iBAAiB;AACf,SAAK,SAAS;AAAA;AAAA,EAGhB,cAAc;AAGZ,SAAK,eAAe;AAAA;AAAA,EAGtB,SAAS;AACP,SAAK;AAEL,SAAK,SAAS,WAAW,KAAK;AAE9B,UAAM,UAAU,KAAK;AACrB,QAAI,CAAC,SAAS;AACZ;AAAA;AAGF,UAAM,IAAI,QAAQ,EAAE;AACpB,UAAM,IAAI,QAAQ,EAAE;AACpB,UAAM,MAAM,IAAI,KAAK,GAAG;AAExB,UAAM,QAAQ,KAAK,eAAe;AAClC,UAAM,QAAQ,KAAK,eAAe;AAClC,UAAM,QAAQ,KAAK,SAAS;AAC5B,UAAM,OAAO,KAAK,KAAK,IAAI,KAAK,GAAG;AAEnC,QAAI,OAAO,KAAK,KAAK,CAAE,kBAAkB,SAAS;AAClD,QAAI,OAAO,KAAK,OAAO,CAAE,QAAQ,IAAI,OAAO,GAAG;AAE/C,QAAI,MAAM,GAAG;AACX,YAAM,KAAK,IAAI,IAAI,GAAG;AACtB,YAAM,QAAQ,IAAI,YAAY,IAAI;AAClC,YAAM,OAAO,IAAI,IAAI,KAAK,QAAQ,IAAI,YAAY,IAAI;AACtD,YAAM,MAAM,IAAI,IAAI,KAAK,QAAQ,IAAI,YAAY,IAAI;AACrD,YAAM,OAAO,IAAI,IAAI,KAAK,IAAI,OAAO,OAAO,MAAM;AAClD,YAAM,YAAY,IAAI,IAAI,KAAK,IAAI,OAAO,OAAO,CAAC,MAAM;AAExD,UAAI,OAAO,KAAK,OAAO;AAAA,QACrB,QAAQ,IAAI,OAAO,MAAM,KAAK,MAAM,WAAW;AAAA,QAC/C,OAAO,YAAY;AAAA;AAGrB,UAAI,OAAO,KAAK,MAAM;AAAA,QACpB,OAAO;AAAA,mBACI;AAAA;AAAA,sBAEG,KAAK,OAAO,QAAQ,KAAK,OAAO;AAAA,mBACnC;AAAA;AAAA;AAIb,YAAM,UAAU,QAAQ,IAAI,QAAQ,MAAM;AAC1C,YAAM,UAAU,QAAQ,OAAO;AAC/B,YAAM,eAAe,wBAAwB,cAAc;AAC3D,UAAI,OAAO,KAAK,MAAM,CAAE,OAAO;AAC/B,UAAI,OAAO,KAAK,MAAM,CAAE,OAAO;AAAA;AAAA;AAAA,EAInC,gBAAgB,OAAiB;AAC/B,QAAI,CAAC,KAAK,SAAS;AACjB,aAAO;AAAA;AAET,UAAM,OAAO,KAAK,KAAK,QAAQ,EAAE,UAAU,KAAK,QAAQ,EAAE;AAC1D,UAAM,IAAI,KAAK,YAAY,MAAM;AACjC,UAAM,IAAI,IAAI,KAAK,KAAK,QAAQ;AAChC,WAAO,KAAK,IAAI,GAAG;AAAA;AAAA,EAGrB,sBAAsB,GAAa;AACjC,WAAO,IAAI,KAAK,KAAK,YAAY;AAAA;AAAA,EAGnC,SAAS;AACP,SAAK,IAAI;AACT,SAAK,GAAG;AACR,SAAK,GAAG;AACR,UAAM;AAAA;AAAA;AAIH,aAAM,SAAS,CAAC,YACrB,mBAAmB,QAAQ,UAAU;",
  "names": []
}
