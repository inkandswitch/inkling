{
  "version": 3,
  "sources": ["/Users/admin/Work/Inkling/InkbaseV2/src/app/gui/MetaToggle.ts"],
  "sourcesContent": ["import { Position, isPosition } from '../../lib/types';\nimport SVG from '../Svg';\nimport { GameObject } from '../GameObject';\nimport Vec from '../../lib/vec';\nimport Store, { Serializable } from '../Store';\nimport { TAU, lerpN, rand } from '../../lib/math';\n\nconst padding = 30;\nconst radius = 20;\n\nexport const aMetaToggle = (gameObj: GameObject) =>\n  gameObj instanceof MetaToggle ? gameObj : null;\n\nexport default class MetaToggle extends GameObject {\n  private readonly element: SVGElement;\n  position: Position;\n  dragging = false;\n\n  public active = false; // Temporary hack \u2014 this should be somewhere more global\n\n  private splats: SVGElement[] = [];\n\n  constructor() {\n    super();\n\n    this.position = Store.init({\n      name: 'Meta Toggle Position',\n      isValid: isPosition,\n      def: { x: padding, y: padding },\n    });\n\n    this.element = SVG.add('g', SVG.guiElm, {\n      ...this.getAttrs(), // This avoids an unstyled flash on first load\n    });\n\n    SVG.add('circle', this.element, { class: 'outer', r: radius });\n    SVG.add('circle', this.element, { class: 'inner', r: radius });\n    const splatsElm = SVG.add('g', this.element, { class: 'splats' });\n    for (let i = 0; i < 50; i++) {\n      const points: Position[] = [];\n      const steps = 5;\n      for (let s = 0; s < steps; s++) {\n        const a = (TAU * (rand(-0.1, 0.1) + s)) / steps;\n        const d = rand(1, 3);\n        points.push(Vec.polar(a, d));\n      }\n      this.splats.push(\n        SVG.add('polyline', splatsElm, {\n          points: SVG.points(points),\n          class: 'splat',\n        })\n      );\n    }\n    SVG.add('circle', this.element, { class: 'secret', r: radius });\n    this.resplat();\n\n    // setInterval(this.toggle.bind(this), 1500);\n  }\n\n  resplat() {\n    if (!this.active) {\n      let angles: number[] = [];\n      this.splats.forEach(splat => {\n        angles = [];\n        for (let i = rand(2, 12); i > 0; i--) {\n          angles.push(rand(0, 360));\n        }\n        const a = angles[rand(0, angles.length) | 0];\n        const curve = rand(0, 1) ** 8;\n        const mass = lerpN(curve, 1, 0.5);\n        const t = 10 / mass / mass;\n        const squish = rand(0, 0.7);\n        SVG.update(splat, {\n          style: `scale: .25; transition-delay: ${rand(0, 0.17)}s`,\n          transform: `\n            rotate(${a})\n            translate(${t})\n            scale(${1 + squish}, ${1 - squish})\n          `,\n        });\n      });\n    } else {\n      this.splats.forEach(splat => {\n        SVG.update(splat, { style: `scale: 0.1` });\n      });\n    }\n  }\n\n  toggle() {\n    this.active = !this.active;\n    document.documentElement.toggleAttribute('meta-mode', this.active);\n    this.resplat();\n  }\n\n  distanceToPoint(point: Position) {\n    return Vec.dist(this.position, point);\n  }\n\n  dragTo(position: Position) {\n    this.dragging = true;\n    this.position = position;\n  }\n\n  remove() {\n    window.location.reload();\n  }\n\n  snapToCorner() {\n    this.dragging = false;\n\n    const windowSize = Vec(window.innerWidth, window.innerHeight);\n\n    // x and y will be exactly 0 or 1\n    const normalizedPosition = Vec.round(Vec.div(this.position, windowSize));\n\n    // x and y will be exactly in a screen corner\n    const cornerPosition = Vec.mul(normalizedPosition, windowSize);\n\n    // x and y will be exactly 1 (left&top) or -1 (right&bottom)\n    const sign = Vec.addS(Vec.mulS(normalizedPosition, -2), 1);\n\n    // Inset from the corner\n    this.position = Vec.add(cornerPosition, Vec.mulS(sign, padding));\n\n    Store.set('Meta Toggle Position', this.position as unknown as Serializable);\n  }\n\n  private getAttrs() {\n    const classes: string[] = ['meta-toggle'];\n\n    if (this.active) {\n      classes.push('active');\n    }\n\n    if (this.dragging) {\n      classes.push('dragging');\n    }\n\n    return {\n      color: 'black',\n      class: classes.join(' '),\n      style: `translate: ${this.position.x}px ${this.position.y}px`,\n    };\n  }\n\n  render() {\n    SVG.update(this.element, this.getAttrs());\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
