{
  "version": 3,
  "sources": ["/Users/admin/Work/Inkling/InkbaseV2/src/app/Svg.ts"],
  "sourcesContent": ["import { clip } from '../lib/math';\nimport { Position, PositionWithPressure } from '../lib/types';\nimport Vec from '../lib/vec';\n\ntype Attributes = Record<string, string | number | boolean | null | undefined>;\n\nconst NS = 'http://www.w3.org/2000/svg';\n\nconst gizmoElm = document.querySelector('#gizmo') as SVGSVGElement;\nconst handleElm = document.querySelector('#handle') as SVGSVGElement;\nconst inkElm = document.querySelector('#ink') as SVGSVGElement;\nconst constraintElm = document.querySelector('#constraint') as SVGSVGElement;\nconst boxElm = document.querySelector('#box') as SVGSVGElement;\nconst wiresElm = document.querySelector('#wires') as SVGSVGElement;\nconst metaElm = document.querySelector('#meta') as SVGSVGElement;\nconst labelElm = document.querySelector('#label') as SVGSVGElement;\nconst guiElm = document.querySelector('#gui') as SVGSVGElement;\nconst nowElm = document.querySelector('#now') as SVGGElement;\n\nfunction add(\n  type: 'text',\n  parent: SVGElement,\n  attributes?: Attributes\n): SVGTextElement;\nfunction add(\n  type: string,\n  parent: SVGElement,\n  attributes?: Attributes\n): SVGElement;\nfunction add(type: string, parent: SVGElement, attributes: Attributes = {}) {\n  return parent.appendChild(\n    update(document.createElementNS(NS, type), attributes)\n  );\n}\n\nfunction bringToFront(element: SVGElement) {\n  const parent = element.parentNode;\n  if (parent) {\n    element.remove();\n    parent.appendChild(element);\n  }\n}\n\n/**\n * Use the sugar attribute `content` to set innerHTML.\n * E.g.: SVG.update(myTextElm, { content: 'hello' })\n */\nfunction update<T extends SVGElement>(elm: T, attributes: Attributes) {\n  Object.entries(attributes).forEach(([key, value]) => {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const cache = ((elm as any).__cache ||= {});\n    if (cache[key] === value) {\n      return;\n    }\n    cache[key] = value;\n\n    const boolish =\n      typeof value === 'boolean' || value === null || value === undefined;\n\n    if (key === 'content') {\n      elm.innerHTML = '' + value;\n    } else if (boolish) {\n      value ? elm.setAttribute(key, '') : elm.removeAttribute(key);\n    } else {\n      elm.setAttribute(key, '' + value);\n    }\n  });\n  return elm;\n}\n\n// Store the current time whenever SVG.clearNow() is called, so that elements\n// created by SVG.now() will live for a duration relative to that time.\nlet lastTime = 0;\n\n/**\n * Puts an element on the screen for a brief moment, after which it's automatically deleted.\n * This allows for immediate-mode rendering \u2014 super useful for debug visuals.\n * By default, elements are removed whenever SVG.clearNow() is next called (typically every frame).\n * Include a `life` attribute to specify a minimum duration until the element is removed.\n */\nfunction now(type: string, attributes: Attributes) {\n  const life = +(attributes.life || 0);\n  delete attributes.life;\n\n  const elm = add(type, nowElm, attributes);\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (elm as any).__expiry = lastTime + life;\n\n  return elm;\n}\n\n/**\n * Called every frame by App, but feel free to call it more frequently if needed\n * (E.g.: at the top of a loop body, so that only elements from the final iteration are shown).\n * Passing `currentTime` allows elements with a \"life\" to not be cleared until their time has passed.\n */\nfunction clearNow(currentTime = Infinity) {\n  if (isFinite(currentTime)) {\n    lastTime = currentTime;\n  }\n\n  for (const elm of Array.from(nowElm.children)) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const expiry = (elm as any).__expiry || 0;\n    if (currentTime > expiry) {\n      elm.remove();\n    }\n  }\n}\n\n/**\n * Helps you build a polyline from Positions (or arrays of Positions).\n * E.g.: SVG.now('polyline', { points: SVG.points(stroke.points), stroke: '#00F' });\n * E.g.: SVG.now('polyline', { points: SVG.points(pos1, pos2, posArr), stroke: '#F00' });\n */\nfunction points(...positions: Array<Position | Position[]>) {\n  return positions.flat().map(positionToPointsString).join(' ');\n}\n\n// TODO: This function is probably the #1 perf hotspot in the codebase.\nfunction positionToPointsString(p: Position) {\n  return p.x + ' ' + p.y;\n}\n\n/** Returns a `translate(x y)` string that can be used for the 'transform' attribute. */\nfunction positionToTransform(p: Position) {\n  return `translate(${p.x} ${p.y})`;\n}\n\n/**\n * Helps you build the path for a semicircular arc, which is normally a huge pain.\n * NB: Can only draw up to a half circle when mirror is false.\n */\nfunction arcPath(\n  center: Position, // Center of the (semi)circle\n  radius: number, // Radius of the (semi)circle\n  angle: number, // Direction to start the arc. Radians, 0 is rightward.\n  rotation: number, // Arc size of the (semi)circle. 0 to PI radians.\n  mirror = true // Mirror the arc across the start. Required to draw more than a half-circle.\n) {\n  // Values outside this range produce nonsense arcs\n  rotation = clip(rotation, -Math.PI, Math.PI);\n\n  const S = Vec.add(center, Vec.polar(angle, radius));\n  let path = '';\n\n  if (mirror) {\n    const B = Vec.add(center, Vec.polar(angle - rotation, radius));\n    path += `M ${B.x}, ${B.y} A ${radius},${radius} 0 0,1 ${S.x}, ${S.y}`;\n  } else {\n    path += `M ${S.x}, ${S.y}`;\n  }\n\n  const A = Vec.add(center, Vec.polar(angle + rotation, radius));\n  path += `A ${radius},${radius} 0 0,1 ${A.x}, ${A.y}`;\n\n  return path;\n}\n\n/** Returns a string that can be used as the 'd' attribute of an SVG path element. */\nfunction path(points: Position[] | PositionWithPressure[]) {\n  return points\n    .map((p, idx) => `${idx === 0 ? 'M' : 'L'} ${p.x} ${p.y}`)\n    .join(' ');\n}\n\nconst statusElement = add('text', guiElm, { class: 'status-text' });\n\nlet statusHideTimeMillis = 0;\n\nfunction showStatus(content: string, time = 3_000) {\n  update(statusElement, { content, 'is-visible': true });\n  statusHideTimeMillis = performance.now() + time;\n  setTimeout(() => {\n    if (performance.now() >= statusHideTimeMillis) {\n      update(statusElement, { 'is-visible': false });\n    }\n  }, time);\n}\n\nexport default {\n  add,\n  update,\n  bringToFront,\n  now,\n  clearNow,\n  points,\n  positionToTransform,\n  arcPath,\n  path,\n  showStatus,\n  gizmoElm,\n  handleElm,\n  inkElm,\n  constraintElm,\n  boxElm,\n  wiresElm,\n  metaElm,\n  labelElm,\n  guiElm,\n};\n"],
  "mappings": "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",
  "names": []
}
