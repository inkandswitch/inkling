{
  "version": 3,
  "sources": ["/Users/admin/Work/Inkling/InkbaseV2/src/lib/TransformationMatrix.ts"],
  "sourcesContent": ["// Marcel's carefully written Transformation Matrix Library\n// There are three types of method:\n// Statefull transforms: that change the matrix\n// Getters: that return a value\n// Transform other things: For transforming points etc.\n\nimport Line from './line';\nimport { Position } from './types';\nimport Vec from './vec';\n\nconst DEGREES_TO_RADIANS = Math.PI / 180;\nconst RADIANS_TO_DEGREES = 180 / Math.PI;\n\nexport default class TransformationMatrix {\n  a = 1;\n  b = 0;\n  c = 0;\n  d = 1;\n  e = 0;\n  f = 0;\n\n  private constructor() {}\n\n  reset() {\n    this.a = 1;\n    this.b = 0;\n    this.c = 0;\n    this.d = 1;\n    this.e = 0;\n    this.f = 0;\n  }\n\n  // STATEFULL TRANSFORMS\n\n  transform(\n    a2: number,\n    b2: number,\n    c2: number,\n    d2: number,\n    e2: number,\n    f2: number\n  ) {\n    const { a: a1, b: b1, c: c1, d: d1, e: e1, f: f1 } = this;\n\n    this.a = a1 * a2 + c1 * b2;\n    this.b = b1 * a2 + d1 * b2;\n    this.c = a1 * c2 + c1 * d2;\n    this.d = b1 * c2 + d1 * d2;\n    this.e = a1 * e2 + c1 * f2 + e1;\n    this.f = b1 * e2 + d1 * f2 + f1;\n\n    return this;\n  }\n\n  rotate(angle: number) {\n    const cos = Math.cos(angle);\n    const sin = Math.sin(angle);\n    this.transform(cos, sin, -sin, cos, 0, 0);\n    return this;\n  }\n\n  rotateDegrees(angle: number) {\n    this.rotate(angle * DEGREES_TO_RADIANS);\n    return this;\n  }\n\n  scale(sx: number, sy: number) {\n    this.transform(sx, 0, 0, sy, 0, 0);\n    return this;\n  }\n\n  skew(sx: number, sy: number) {\n    this.transform(1, sy, sx, 1, 0, 0);\n    return this;\n  }\n\n  translate(tx: number, ty: number) {\n    this.transform(1, 0, 0, 1, tx, ty);\n    return this;\n  }\n\n  flipX() {\n    this.transform(-1, 0, 0, 1, 0, 0);\n    return this;\n  }\n\n  flipY() {\n    this.transform(1, 0, 0, -1, 0, 0);\n    return this;\n  }\n\n  inverse() {\n    const { a, b, c, d, e, f } = this;\n\n    const dt = a * d - b * c;\n\n    this.a = d / dt;\n    this.b = -b / dt;\n    this.c = -c / dt;\n    this.d = a / dt;\n    this.e = (c * f - d * e) / dt;\n    this.f = -(a * f - b * e) / dt;\n\n    return this;\n  }\n\n  // GETTERS\n\n  getInverse() {\n    const { a, b, c, d, e, f } = this;\n\n    const m = new TransformationMatrix();\n    const dt = a * d - b * c;\n\n    m.a = d / dt;\n    m.b = -b / dt;\n    m.c = -c / dt;\n    m.d = a / dt;\n    m.e = (c * f - d * e) / dt;\n    m.f = -(a * f - b * e) / dt;\n\n    return m;\n  }\n\n  getPosition() {\n    return { x: this.e, y: this.f };\n  }\n\n  getRotation() {\n    const E = (this.a + this.d) / 2;\n    const F = (this.a - this.d) / 2;\n    const G = (this.c + this.b) / 2;\n    const H = (this.c - this.b) / 2;\n\n    const a1 = Math.atan2(G, F);\n    const a2 = Math.atan2(H, E);\n\n    const phi = (a2 + a1) / 2;\n    return -phi * RADIANS_TO_DEGREES;\n  }\n\n  getScale() {\n    const E = (this.a + this.d) / 2;\n    const F = (this.a - this.d) / 2;\n    const G = (this.c + this.b) / 2;\n    const H = (this.c - this.b) / 2;\n\n    const Q = Math.sqrt(E * E + H * H);\n    const R = Math.sqrt(F * F + G * G);\n\n    return {\n      scaleX: Q + R,\n      scaleY: Q - R,\n    };\n  }\n\n  // TRANSFORM OTHER THINGS\n\n  transformMatrix(m2: TransformationMatrix) {\n    const { a: a1, b: b1, c: c1, d: d1, e: e1, f: f1 } = this;\n\n    const a2 = m2.a;\n    const b2 = m2.b;\n    const c2 = m2.c;\n    const d2 = m2.d;\n    const e2 = m2.e;\n    const f2 = m2.f;\n\n    const m = new TransformationMatrix();\n    m.a = a1 * a2 + c1 * b2;\n    m.b = b1 * a2 + d1 * b2;\n    m.c = a1 * c2 + c1 * d2;\n    m.d = b1 * c2 + d1 * d2;\n    m.e = a1 * e2 + c1 * f2 + e1;\n    m.f = b1 * e2 + d1 * f2 + f1;\n\n    return m;\n  }\n\n  transformPoint<P extends Position>(p: P): P {\n    const { x, y } = p;\n    const { a, b, c, d, e, f } = this;\n\n    return {\n      ...p, // to get the other properties\n      x: x * a + y * c + e,\n      y: x * b + y * d + f,\n    };\n  }\n\n  transformLine(l2: Line): Line {\n    return {\n      a: this.transformPoint(l2.a),\n      b: this.transformPoint(l2.b),\n    };\n  }\n\n  // factory methods\n\n  static identity(): TransformationMatrix {\n    return new TransformationMatrix();\n  }\n\n  static fromLineTranslateRotate(a: Position, b: Position) {\n    const line = Vec.sub(b, a);\n\n    const m = new TransformationMatrix();\n    m.translate(a.x, a.y);\n    m.rotate(Vec.angle(line));\n    return m;\n  }\n\n  static fromLine(a: Position, b: Position) {\n    const line = Vec.sub(b, a);\n    const length = Vec.len(line);\n\n    const m = new TransformationMatrix();\n    m.translate(a.x, a.y);\n    m.rotate(Vec.angle(line));\n    m.scale(length, length);\n\n    return m;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
